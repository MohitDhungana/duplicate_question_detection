{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DQD_mohit.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MohitDhungana/duplicate_question_detection/blob/master/subinDqD_unstable\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wkJvn2LQhlRq",
        "colab_type": "code",
        "outputId": "1bedbef8-c14e-4a6f-e6ee-4bfe03fe2a85",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 160
        }
      },
      "source": [
        "from time import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from gensim.models import KeyedVectors\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "nltk.download('stopwords')\n",
        "\n",
        "import itertools\n",
        "import datetime\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w572jSYxhwS2",
        "colab_type": "code",
        "outputId": "f6b503b5-e555-4468-f61f-7e7f214bd099",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        }
      },
      "source": [
        "!ls '/content/drive/My Drive'\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " case-study-sample.gdoc\n",
            " CG\n",
            "'Ch04-Digital Transmission.gslides'\n",
            "'Ch05-Analog Transmission.gslides'\n",
            " Ch06-BWutilization-Mux-Spreading.gslides\n",
            " Ch07-TxmMedia.gslides\n",
            " Ch08-Switching-Forouzan.gslides\n",
            " Ch10-ErrorDetCorrection.gslides\n",
            " COA\n",
            "'Colab Notebooks'\n",
            "'Computer Network'\n",
            " Datasets\n",
            "'Endnote X8'\n",
            " flower.csv\n",
            " GoogleNews-vectors-negative300.bin.gz\n",
            " OOAD_Final\n",
            "'Project Management'\n",
            " Resume.gdoc\n",
            "'Software engineering'\n",
            " stock_price.csv\n",
            " train.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tGikGcvYhw0d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv('/content/drive/My Drive/train.csv')\n",
        "stops = set(stopwords.words('english'))\n",
        "\n",
        "def text_to_word_list(text):\n",
        "#   gets a whole question inside text variable on which  preprocessing is done and then the question is splitted into word indices and returned\n",
        "    text = str(text)\n",
        "    text = text.lower()\n",
        "\n",
        "    # Clean the text\n",
        "    text = re.sub(r\"[^A-Za-z0-9^,!.\\/'+-=]\", \" \", text)\n",
        "    text = re.sub(r\"what's\", \"what is \", text)\n",
        "    text = re.sub(r\"\\'s\", \" \", text)\n",
        "    text = re.sub(r\"\\'ve\", \" have \", text)\n",
        "    text = re.sub(r\"can't\", \"cannot \", text)\n",
        "    text = re.sub(r\"n't\", \" not \", text)\n",
        "    text = re.sub(r\"i'm\", \"i am \", text)\n",
        "    text = re.sub(r\"\\'re\", \" are \", text)\n",
        "    text = re.sub(r\"\\'d\", \" would \", text)\n",
        "    text = re.sub(r\"\\'ll\", \" will \", text)\n",
        "    text = re.sub(r\",\", \" \", text)\n",
        "    text = re.sub(r\"\\.\", \" \", text)\n",
        "    text = re.sub(r\"!\", \" ! \", text)\n",
        "    text = re.sub(r\"\\/\", \" \", text)\n",
        "    text = re.sub(r\"\\^\", \" ^ \", text)\n",
        "    text = re.sub(r\"\\+\", \" + \", text)\n",
        "    text = re.sub(r\"\\-\", \" - \", text)\n",
        "    text = re.sub(r\"\\=\", \" = \", text)\n",
        "    text = re.sub(r\"'\", \" \", text)\n",
        "    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n",
        "    text = re.sub(r\":\", \" : \", text)\n",
        "    text = re.sub(r\" e g \", \" eg \", text)\n",
        "    text = re.sub(r\" b g \", \" bg \", text)\n",
        "    text = re.sub(r\" u s \", \" american \", text)\n",
        "    text = re.sub(r\"\\0s\", \"0\", text)\n",
        "    text = re.sub(r\" 9 11 \", \"911\", text)\n",
        "    text = re.sub(r\"e - mail\", \"email\", text)\n",
        "    text = re.sub(r\"j k\", \"jk\", text)\n",
        "    text = re.sub(r\"\\s{2,}\", \" \", text)\n",
        "\n",
        "    text = text.split()\n",
        "\n",
        "    return text\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QXOMPzOgh0RX",
        "colab_type": "code",
        "outputId": "0f7ade68-c0fc-499e-d140-2d1c7d2137b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        }
      },
      "source": [
        "# Prepare embedding\n",
        "\n",
        "vocabulary = dict() \n",
        "inverse_vocabulary = ['<unk>']  # '<unk>' will never be used, it is only a placeholder for the [0, 0, ....0] embedding\n",
        "word2vec = KeyedVectors.load_word2vec_format('/content/drive/My Drive/GoogleNews-vectors-negative300.bin.gz', binary=True)\n",
        "\n",
        "questions_cols = ['question1', 'question2']\n",
        "\n",
        "# Iterate over the questions(i.e. 'question 1', 'question2') of the training sets provided \n",
        "# get the data from dataset(df) in  variable dataset\n",
        "for dataset in [df]:\n",
        "#   now iterate through the rows of the dataset using  index as iterator (i.e. goes through the row having particular index at a time) \n",
        "    for index, row in dataset.iterrows():\n",
        "\n",
        "        # Iterate through the text of both questions within the current  row\n",
        "        for question in questions_cols:\n",
        "            que2no = []  # que2no ->  numbers representation of the cureently being processed question\n",
        "            \n",
        "            count_ = 0\n",
        "\n",
        "            for word in text_to_word_list(row[question]):\n",
        "\n",
        "                # Check for unwanted words i.e mainly stopwords\n",
        "                if word in stops and word not in word2vec.vocab:\n",
        "                    continue\n",
        "                    \n",
        "#                 limit the length to 50, this decreased the time to train an epoch from more than 1 hour to 20 minutes.\n",
        "                if count_ >= 50 :\n",
        "                  continue\n",
        "                count_ +=1\n",
        "                \n",
        "                \n",
        "                if word not in vocabulary:\n",
        "                    vocabulary[word] = len(inverse_vocabulary)\n",
        "                    que2no.append(len(inverse_vocabulary))\n",
        "                    inverse_vocabulary.append(word)\n",
        "                else:\n",
        "                    que2no.append(vocabulary[word])\n",
        "#                     que2no.append(float(vocabulary[word]))\n",
        "\n",
        "#                 que2no=list(map(int,que2no))\n",
        "\n",
        "            # Replace questions as word to question as number representation\n",
        "            dataset.set_value(index, question, que2no)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/smart_open/smart_open_lib.py:398: UserWarning: This function is deprecated, use smart_open.open instead. See the migration notes for details: https://github.com/RaRe-Technologies/smart_open/blob/master/README.rst#migrating-to-the-new-open-function\n",
            "  'See the migration notes for details: %s' % _MIGRATION_NOTES_URL\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:43: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HzWyW5V9h3cz",
        "colab_type": "code",
        "outputId": "9f0095dc-0589-4db3-83e1-71099ff49301",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "# max_sequence_length=50\n",
        "max_seq_length = max(df.question1.map(lambda x: len(x)).max(),\n",
        "                     df.question2.map(lambda x: len(x)).max()\n",
        "                    )\n",
        "# max_seq_length\n",
        "df.tail()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>qid1</th>\n",
              "      <th>qid2</th>\n",
              "      <th>question1</th>\n",
              "      <th>question2</th>\n",
              "      <th>is_duplicate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>404285</th>\n",
              "      <td>404285</td>\n",
              "      <td>433578</td>\n",
              "      <td>379845</td>\n",
              "      <td>[26, 184, 3632, 115, 307, 8, 3, 24585, 522, 52...</td>\n",
              "      <td>[26, 184, 3632, 115, 307, 8, 12032, 522, 523, ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404286</th>\n",
              "      <td>404286</td>\n",
              "      <td>18840</td>\n",
              "      <td>155606</td>\n",
              "      <td>[97, 99, 2441, 307, 2, 598, 180, 1822]</td>\n",
              "      <td>[2, 47, 467, 77, 307, 2, 598, 180, 1822]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404287</th>\n",
              "      <td>404287</td>\n",
              "      <td>537928</td>\n",
              "      <td>537929</td>\n",
              "      <td>[1, 2, 57, 11012]</td>\n",
              "      <td>[1, 2, 83, 11012]</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404288</th>\n",
              "      <td>404288</td>\n",
              "      <td>537930</td>\n",
              "      <td>537931</td>\n",
              "      <td>[1, 2, 3, 21205, 12587, 534, 2769, 33, 3114, 8...</td>\n",
              "      <td>[16, 42, 1086, 2877, 2854, 2622, 1220, 16, 173...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404289</th>\n",
              "      <td>404289</td>\n",
              "      <td>537932</td>\n",
              "      <td>537933</td>\n",
              "      <td>[1, 2, 139, 401, 2543, 175, 7227]</td>\n",
              "      <td>[1, 2, 47, 139, 401, 2543, 175, 135, 7227]</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            id  ...  is_duplicate\n",
              "404285  404285  ...             0\n",
              "404286  404286  ...             1\n",
              "404287  404287  ...             0\n",
              "404288  404288  ...             0\n",
              "404289  404289  ...             0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ODpAYNEJh6Kv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "embedding_dim = 300\n",
        "# creating an embedding matrix whose length is one more than vocabulary and dimension is 300\n",
        "embedding_matrix = 1 * np.random.randn(len(vocabulary) + 1, embedding_dim)  \n",
        "embedding_matrix[0] = 0  # So that the zeroth place remain empty \n",
        "\n",
        "# (Build the embedding matrix) Assigning the word2vec embedding for each words of our vocabulary  \n",
        "for word, index in vocabulary.items():\n",
        "    if word in word2vec.vocab:\n",
        "        embedding_matrix[index] = word2vec.word_vec(word)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m-yFAqaSh7-7",
        "colab_type": "code",
        "outputId": "65e6b379-7aa2-4c42-86b1-d89901c9b741",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "X=df[questions_cols]\n",
        "Y=df['is_duplicate']\n",
        "\n",
        "\n",
        "x_train,x_validate,y_train,y_validate = train_test_split(X, Y, test_size = 0.3) # dataset split to 70% for training and 30% for validation\n",
        "\n",
        "print(x_train.shape)\n",
        "print(x_validate.shape)\n",
        "print(y_train.shape)\n",
        "print(y_validate.shape)\n",
        "                 \n",
        "# Split to dicts\n",
        "x_train = {'left': x_train.question1, 'right': x_train.question2}\n",
        "x_validate = {'left': x_validate.question1, 'right': x_validate.question2}\n",
        "\n",
        "# Convert labels to their numpy representations\n",
        "y_train=y_train.values\n",
        "y_validate=y_validate.values"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(283003, 2)\n",
            "(121287, 2)\n",
            "(283003,)\n",
            "(121287,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JL944Kjoh-eP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "# zero padding\n",
        "\n",
        "for dataset, side in itertools.product([x_train,x_validate],['left','right']):\n",
        "  dataset[side] = pad_sequences(dataset[side], maxlen = max_seq_length)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pS5Q7ILBiB-9",
        "colab_type": "code",
        "outputId": "344a39a8-98d3-49b9-e868-cab403183c7c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "# print(df['question1'][0])\n",
        "\n",
        "# print(dataset)\n",
        "print(x_train['left'].shape)\n",
        "# print(x_train['left'])\n",
        "print(x_validate['left'].shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(283003, 50)\n",
            "(121287, 50)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q8IPUompiDlb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# check to see if shape of left and right input is same\n",
        "assert x_train['left'].shape == x_train['right'].shape\n",
        "\n",
        "# check to see if shape of input and output is same\n",
        "assert len(x_train['left']) == len(y_train)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sTLKKuQbiFI-",
        "colab_type": "code",
        "outputId": "b7d65767-8460-43da-a107-862ba88c0094",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# shape of question1 column (x,y)==(total rows, total words in each question)\n",
        "x_train['left'].shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(283003, 50)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OisOL0zPiGmG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# manhattan distance calculation function\n",
        "import tensorflow.keras.backend as K\n",
        "def manhattan_distance(left,right):\n",
        "  return K.exp(-K.sum(K.abs(left-right),axis=1, keepdims=True))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ABUxQznmiJVc",
        "colab_type": "code",
        "outputId": "5fd9e0a5-4538-4ee6-d74e-74e7eccd4657",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Input, Embedding, LSTM, Lambda, CuDNNLSTM,Bidirectional\n",
        "\n",
        "\n",
        "n_hidden = 20\n",
        "n_epochs=220\n",
        "gradient_clipping_norm  = 1.25\n",
        "batch_size=64\n",
        "\n",
        "# input layer\n",
        "#recheck shape before training\n",
        "left_input = Input(shape = (max_seq_length,), dtype='int32',name = 'left_input')\n",
        "right_input = Input(shape = (max_seq_length,), dtype='int32', name = 'right_input')\n",
        "\n",
        "\n",
        "\n",
        "# embedding layer\n",
        "# recheck dims \n",
        "embedding_layer = Embedding(input_dim = len(embedding_matrix), output_dim = embedding_dim, input_length = max_seq_length, weights=[embedding_matrix], trainable=False, name = 'embedding_layer')\n",
        "\n",
        "encoded_left = embedding_layer(left_input)\n",
        "encoded_right = embedding_layer(right_input)\n",
        "\n",
        "\n",
        "\n",
        "#LSTM instantiation\n",
        "# check parameter for LSTM.\n",
        "shared_lstm = Bidirectional(CuDNNLSTM(n_hidden, name = 'LSTM_layer'))\n",
        "\n",
        "# shared LSTM\n",
        "left_output = shared_lstm(encoded_left)\n",
        "right_output = shared_lstm(encoded_right)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# TODO: check output shape of the output lambda layer\n",
        "# output layer\n",
        "output_layer = Lambda(function = lambda x : manhattan_distance(x[0], x[1]),output_shape=lambda x: (x[0][0],1))([left_output, right_output])\n",
        "\n",
        "\n",
        "\n",
        "# define above model\n",
        "model = tf.keras.Model(inputs=[left_input, right_input], outputs=output_layer)\n",
        "\n",
        "# summary of model\n",
        "print(model.summary())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model_4\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "left_input (InputLayer)         [(None, 50)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "right_input (InputLayer)        [(None, 50)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "embedding_layer (Embedding)     (None, 50, 300)      25796400    left_input[0][0]                 \n",
            "                                                                 right_input[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_4 (Bidirectional) (None, 40)           51520       embedding_layer[0][0]            \n",
            "                                                                 embedding_layer[1][0]            \n",
            "__________________________________________________________________________________________________\n",
            "lambda_4 (Lambda)               (None, 1)            0           bidirectional_4[0][0]            \n",
            "                                                                 bidirectional_4[1][0]            \n",
            "==================================================================================================\n",
            "Total params: 25,847,920\n",
            "Trainable params: 51,520\n",
            "Non-trainable params: 25,796,400\n",
            "__________________________________________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fQE1FClviLvP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# compile the model\n",
        "\n",
        "from time import time\n",
        "from tensorflow.keras.optimizers import Adadelta\n",
        "from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\n",
        "# from tensorflow.keras.callbacks import TensorBoard\n",
        "\n",
        "\n",
        "# LOG_DIR=\"/root/logs\"\n",
        "# tensorboard = TensorBoard(log_dir=LOG_DIR.format(time()))\n",
        "\n",
        "weight_path='/content/drive/My Drive/dqd_model_weights.h5'\n",
        "\n",
        "checkpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n",
        "early_stopping = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=5)\n",
        "callbacks = [checkpoint, early_stopping]\n",
        "\n",
        "optimizer = SGD(lr=0.01, clipnorm = gradient_clipping_norm)\n",
        "model.compile(optimizer = optimizer, loss = 'mean_squared_error', metrics = ['accuracy'])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAQV83GDkjS2",
        "colab_type": "code",
        "outputId": "20b37100-4625-4e34-b66b-65776667dd68",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 4716
        }
      },
      "source": [
        "# train (fit) the model\n",
        "\n",
        "training_start_time = time()\n",
        "hist = model.fit([x_train['left'], x_train['right']], y_train, \n",
        "                 batch_size=batch_size,\n",
        "                 epochs=n_epochs, \n",
        "                 shuffle = True, \n",
        "                 validation_split=0.20, \n",
        "                 callbacks=callbacks)\n",
        "print(hist.history)\n",
        "print(\"Training time finished.\\n{} epochs in {}\".format(n_epochs, datetime.timedelta(seconds=time()-training_start_time)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 226402 samples, validate on 56601 samples\n",
            "Epoch 1/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.2030 - acc: 0.6986\n",
            "Epoch 00001: val_loss improved from inf to 0.20275, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.2030 - acc: 0.6986 - val_loss: 0.2027 - val_acc: 0.6979\n",
            "Epoch 2/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1994 - acc: 0.7011\n",
            "Epoch 00002: val_loss improved from 0.20275 to 0.19966, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1994 - acc: 0.7011 - val_loss: 0.1997 - val_acc: 0.6992\n",
            "Epoch 3/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1967 - acc: 0.7039\n",
            "Epoch 00003: val_loss improved from 0.19966 to 0.19737, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 241us/sample - loss: 0.1967 - acc: 0.7038 - val_loss: 0.1974 - val_acc: 0.7016\n",
            "Epoch 4/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1945 - acc: 0.7061\n",
            "Epoch 00004: val_loss improved from 0.19737 to 0.19535, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1945 - acc: 0.7061 - val_loss: 0.1954 - val_acc: 0.7039\n",
            "Epoch 5/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1925 - acc: 0.7086\n",
            "Epoch 00005: val_loss improved from 0.19535 to 0.19338, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 241us/sample - loss: 0.1925 - acc: 0.7086 - val_loss: 0.1934 - val_acc: 0.7059\n",
            "Epoch 6/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1905 - acc: 0.7111\n",
            "Epoch 00006: val_loss improved from 0.19338 to 0.19142, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1905 - acc: 0.7110 - val_loss: 0.1914 - val_acc: 0.7085\n",
            "Epoch 7/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1885 - acc: 0.7138\n",
            "Epoch 00007: val_loss improved from 0.19142 to 0.18956, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1885 - acc: 0.7138 - val_loss: 0.1896 - val_acc: 0.7108\n",
            "Epoch 8/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1866 - acc: 0.7167\n",
            "Epoch 00008: val_loss improved from 0.18956 to 0.18788, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1866 - acc: 0.7166 - val_loss: 0.1879 - val_acc: 0.7142\n",
            "Epoch 9/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1849 - acc: 0.7198\n",
            "Epoch 00009: val_loss improved from 0.18788 to 0.18634, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1849 - acc: 0.7198 - val_loss: 0.1863 - val_acc: 0.7165\n",
            "Epoch 10/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1833 - acc: 0.7222\n",
            "Epoch 00010: val_loss improved from 0.18634 to 0.18497, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1834 - acc: 0.7221 - val_loss: 0.1850 - val_acc: 0.7192\n",
            "Epoch 11/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1820 - acc: 0.7248\n",
            "Epoch 00011: val_loss improved from 0.18497 to 0.18376, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 245us/sample - loss: 0.1820 - acc: 0.7248 - val_loss: 0.1838 - val_acc: 0.7206\n",
            "Epoch 12/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1807 - acc: 0.7272\n",
            "Epoch 00012: val_loss improved from 0.18376 to 0.18262, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1807 - acc: 0.7271 - val_loss: 0.1826 - val_acc: 0.7237\n",
            "Epoch 13/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1796 - acc: 0.7295\n",
            "Epoch 00013: val_loss improved from 0.18262 to 0.18159, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1796 - acc: 0.7295 - val_loss: 0.1816 - val_acc: 0.7257\n",
            "Epoch 14/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1786 - acc: 0.7318\n",
            "Epoch 00014: val_loss improved from 0.18159 to 0.18068, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 241us/sample - loss: 0.1786 - acc: 0.7318 - val_loss: 0.1807 - val_acc: 0.7277\n",
            "Epoch 15/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1776 - acc: 0.7340\n",
            "Epoch 00015: val_loss improved from 0.18068 to 0.17984, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 247us/sample - loss: 0.1776 - acc: 0.7339 - val_loss: 0.1798 - val_acc: 0.7293\n",
            "Epoch 16/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1767 - acc: 0.7359\n",
            "Epoch 00016: val_loss improved from 0.17984 to 0.17902, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 247us/sample - loss: 0.1767 - acc: 0.7359 - val_loss: 0.1790 - val_acc: 0.7311\n",
            "Epoch 17/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1758 - acc: 0.7377\n",
            "Epoch 00017: val_loss improved from 0.17902 to 0.17825, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 246us/sample - loss: 0.1758 - acc: 0.7377 - val_loss: 0.1783 - val_acc: 0.7339\n",
            "Epoch 18/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1750 - acc: 0.7394\n",
            "Epoch 00018: val_loss improved from 0.17825 to 0.17754, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 241us/sample - loss: 0.1750 - acc: 0.7395 - val_loss: 0.1775 - val_acc: 0.7347\n",
            "Epoch 19/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1743 - acc: 0.7409\n",
            "Epoch 00019: val_loss improved from 0.17754 to 0.17684, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 246us/sample - loss: 0.1743 - acc: 0.7409 - val_loss: 0.1768 - val_acc: 0.7367\n",
            "Epoch 20/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1736 - acc: 0.7430\n",
            "Epoch 00020: val_loss improved from 0.17684 to 0.17617, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 249us/sample - loss: 0.1736 - acc: 0.7430 - val_loss: 0.1762 - val_acc: 0.7382\n",
            "Epoch 21/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1729 - acc: 0.7444\n",
            "Epoch 00021: val_loss improved from 0.17617 to 0.17555, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 245us/sample - loss: 0.1729 - acc: 0.7445 - val_loss: 0.1755 - val_acc: 0.7398\n",
            "Epoch 22/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1722 - acc: 0.7461\n",
            "Epoch 00022: val_loss improved from 0.17555 to 0.17499, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1722 - acc: 0.7461 - val_loss: 0.1750 - val_acc: 0.7409\n",
            "Epoch 23/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1716 - acc: 0.7471\n",
            "Epoch 00023: val_loss improved from 0.17499 to 0.17439, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1716 - acc: 0.7471 - val_loss: 0.1744 - val_acc: 0.7418\n",
            "Epoch 24/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1710 - acc: 0.7484\n",
            "Epoch 00024: val_loss improved from 0.17439 to 0.17386, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 243us/sample - loss: 0.1710 - acc: 0.7484 - val_loss: 0.1739 - val_acc: 0.7430\n",
            "Epoch 25/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1704 - acc: 0.7497\n",
            "Epoch 00025: val_loss improved from 0.17386 to 0.17332, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1704 - acc: 0.7498 - val_loss: 0.1733 - val_acc: 0.7443\n",
            "Epoch 26/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1698 - acc: 0.7509\n",
            "Epoch 00026: val_loss improved from 0.17332 to 0.17280, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1698 - acc: 0.7509 - val_loss: 0.1728 - val_acc: 0.7457\n",
            "Epoch 27/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1693 - acc: 0.7523\n",
            "Epoch 00027: val_loss improved from 0.17280 to 0.17234, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1693 - acc: 0.7523 - val_loss: 0.1723 - val_acc: 0.7463\n",
            "Epoch 28/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1688 - acc: 0.7532\n",
            "Epoch 00028: val_loss improved from 0.17234 to 0.17189, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 234us/sample - loss: 0.1688 - acc: 0.7532 - val_loss: 0.1719 - val_acc: 0.7470\n",
            "Epoch 29/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1683 - acc: 0.7543\n",
            "Epoch 00029: val_loss improved from 0.17189 to 0.17144, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1683 - acc: 0.7543 - val_loss: 0.1714 - val_acc: 0.7483\n",
            "Epoch 30/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1678 - acc: 0.7554\n",
            "Epoch 00030: val_loss improved from 0.17144 to 0.17103, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1678 - acc: 0.7554 - val_loss: 0.1710 - val_acc: 0.7489\n",
            "Epoch 31/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1674 - acc: 0.7564\n",
            "Epoch 00031: val_loss improved from 0.17103 to 0.17064, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1673 - acc: 0.7564 - val_loss: 0.1706 - val_acc: 0.7492\n",
            "Epoch 32/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1669 - acc: 0.7573\n",
            "Epoch 00032: val_loss improved from 0.17064 to 0.17026, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1669 - acc: 0.7573 - val_loss: 0.1703 - val_acc: 0.7501\n",
            "Epoch 33/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1665 - acc: 0.7580\n",
            "Epoch 00033: val_loss improved from 0.17026 to 0.16986, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 234us/sample - loss: 0.1665 - acc: 0.7580 - val_loss: 0.1699 - val_acc: 0.7515\n",
            "Epoch 34/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1661 - acc: 0.7590\n",
            "Epoch 00034: val_loss improved from 0.16986 to 0.16950, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1661 - acc: 0.7590 - val_loss: 0.1695 - val_acc: 0.7521\n",
            "Epoch 35/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1656 - acc: 0.7599\n",
            "Epoch 00035: val_loss improved from 0.16950 to 0.16916, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 235us/sample - loss: 0.1657 - acc: 0.7599 - val_loss: 0.1692 - val_acc: 0.7527\n",
            "Epoch 36/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1653 - acc: 0.7604\n",
            "Epoch 00036: val_loss improved from 0.16916 to 0.16884, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 234us/sample - loss: 0.1653 - acc: 0.7604 - val_loss: 0.1688 - val_acc: 0.7535\n",
            "Epoch 37/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1649 - acc: 0.7610\n",
            "Epoch 00037: val_loss improved from 0.16884 to 0.16849, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 233us/sample - loss: 0.1649 - acc: 0.7610 - val_loss: 0.1685 - val_acc: 0.7539\n",
            "Epoch 38/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1645 - acc: 0.7616\n",
            "Epoch 00038: val_loss improved from 0.16849 to 0.16818, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 235us/sample - loss: 0.1645 - acc: 0.7616 - val_loss: 0.1682 - val_acc: 0.7543\n",
            "Epoch 39/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1642 - acc: 0.7624\n",
            "Epoch 00039: val_loss improved from 0.16818 to 0.16787, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 235us/sample - loss: 0.1642 - acc: 0.7624 - val_loss: 0.1679 - val_acc: 0.7553\n",
            "Epoch 40/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1639 - acc: 0.7630\n",
            "Epoch 00040: val_loss improved from 0.16787 to 0.16758, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 53s 236us/sample - loss: 0.1638 - acc: 0.7630 - val_loss: 0.1676 - val_acc: 0.7563\n",
            "Epoch 41/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1635 - acc: 0.7635\n",
            "Epoch 00041: val_loss improved from 0.16758 to 0.16731, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 241us/sample - loss: 0.1635 - acc: 0.7635 - val_loss: 0.1673 - val_acc: 0.7566\n",
            "Epoch 42/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1632 - acc: 0.7642\n",
            "Epoch 00042: val_loss improved from 0.16731 to 0.16703, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1632 - acc: 0.7642 - val_loss: 0.1670 - val_acc: 0.7570\n",
            "Epoch 43/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1629 - acc: 0.7648\n",
            "Epoch 00043: val_loss improved from 0.16703 to 0.16675, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1629 - acc: 0.7647 - val_loss: 0.1668 - val_acc: 0.7576\n",
            "Epoch 44/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1625 - acc: 0.7652\n",
            "Epoch 00044: val_loss improved from 0.16675 to 0.16651, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1626 - acc: 0.7652 - val_loss: 0.1665 - val_acc: 0.7581\n",
            "Epoch 45/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1623 - acc: 0.7661\n",
            "Epoch 00045: val_loss improved from 0.16651 to 0.16625, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 238us/sample - loss: 0.1623 - acc: 0.7661 - val_loss: 0.1662 - val_acc: 0.7587\n",
            "Epoch 46/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1619 - acc: 0.7664\n",
            "Epoch 00046: val_loss improved from 0.16625 to 0.16603, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1619 - acc: 0.7664 - val_loss: 0.1660 - val_acc: 0.7597\n",
            "Epoch 47/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1617 - acc: 0.7670\n",
            "Epoch 00047: val_loss improved from 0.16603 to 0.16576, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1617 - acc: 0.7670 - val_loss: 0.1658 - val_acc: 0.7594\n",
            "Epoch 48/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1614 - acc: 0.7675\n",
            "Epoch 00048: val_loss improved from 0.16576 to 0.16549, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 241us/sample - loss: 0.1614 - acc: 0.7674 - val_loss: 0.1655 - val_acc: 0.7596\n",
            "Epoch 49/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1611 - acc: 0.7681\n",
            "Epoch 00049: val_loss improved from 0.16549 to 0.16528, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 244us/sample - loss: 0.1611 - acc: 0.7681 - val_loss: 0.1653 - val_acc: 0.7600\n",
            "Epoch 50/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1608 - acc: 0.7685\n",
            "Epoch 00050: val_loss improved from 0.16528 to 0.16504, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1608 - acc: 0.7685 - val_loss: 0.1650 - val_acc: 0.7608\n",
            "Epoch 51/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1606 - acc: 0.7691\n",
            "Epoch 00051: val_loss improved from 0.16504 to 0.16482, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1606 - acc: 0.7691 - val_loss: 0.1648 - val_acc: 0.7613\n",
            "Epoch 52/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1603 - acc: 0.7694\n",
            "Epoch 00052: val_loss improved from 0.16482 to 0.16459, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 244us/sample - loss: 0.1603 - acc: 0.7694 - val_loss: 0.1646 - val_acc: 0.7616\n",
            "Epoch 53/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1601 - acc: 0.7699\n",
            "Epoch 00053: val_loss improved from 0.16459 to 0.16446, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 237us/sample - loss: 0.1601 - acc: 0.7700 - val_loss: 0.1645 - val_acc: 0.7631\n",
            "Epoch 54/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1598 - acc: 0.7704\n",
            "Epoch 00054: val_loss improved from 0.16446 to 0.16420, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1598 - acc: 0.7704 - val_loss: 0.1642 - val_acc: 0.7626\n",
            "Epoch 55/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1596 - acc: 0.7706\n",
            "Epoch 00055: val_loss improved from 0.16420 to 0.16403, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 246us/sample - loss: 0.1596 - acc: 0.7706 - val_loss: 0.1640 - val_acc: 0.7621\n",
            "Epoch 56/220\n",
            "226368/226402 [============================>.] - ETA: 0s - loss: 0.1594 - acc: 0.7712\n",
            "Epoch 00056: val_loss improved from 0.16403 to 0.16375, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1594 - acc: 0.7712 - val_loss: 0.1637 - val_acc: 0.7632\n",
            "Epoch 57/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1591 - acc: 0.7717\n",
            "Epoch 00057: val_loss improved from 0.16375 to 0.16359, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1591 - acc: 0.7717 - val_loss: 0.1636 - val_acc: 0.7635\n",
            "Epoch 58/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1589 - acc: 0.7719\n",
            "Epoch 00058: val_loss improved from 0.16359 to 0.16336, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1589 - acc: 0.7719 - val_loss: 0.1634 - val_acc: 0.7641\n",
            "Epoch 59/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1587 - acc: 0.7722\n",
            "Epoch 00059: val_loss improved from 0.16336 to 0.16318, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 241us/sample - loss: 0.1587 - acc: 0.7722 - val_loss: 0.1632 - val_acc: 0.7647\n",
            "Epoch 60/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1585 - acc: 0.7727\n",
            "Epoch 00060: val_loss improved from 0.16318 to 0.16298, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 246us/sample - loss: 0.1585 - acc: 0.7728 - val_loss: 0.1630 - val_acc: 0.7649\n",
            "Epoch 61/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1582 - acc: 0.7729\n",
            "Epoch 00061: val_loss improved from 0.16298 to 0.16285, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 241us/sample - loss: 0.1583 - acc: 0.7729 - val_loss: 0.1629 - val_acc: 0.7658\n",
            "Epoch 62/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1580 - acc: 0.7736\n",
            "Epoch 00062: val_loss improved from 0.16285 to 0.16265, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 239us/sample - loss: 0.1580 - acc: 0.7736 - val_loss: 0.1626 - val_acc: 0.7663\n",
            "Epoch 63/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1578 - acc: 0.7738\n",
            "Epoch 00063: val_loss improved from 0.16265 to 0.16247, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 244us/sample - loss: 0.1578 - acc: 0.7738 - val_loss: 0.1625 - val_acc: 0.7662\n",
            "Epoch 64/220\n",
            "226176/226402 [============================>.] - ETA: 0s - loss: 0.1576 - acc: 0.7742\n",
            "Epoch 00064: val_loss improved from 0.16247 to 0.16228, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 56s 246us/sample - loss: 0.1576 - acc: 0.7742 - val_loss: 0.1623 - val_acc: 0.7669\n",
            "Epoch 65/220\n",
            "226240/226402 [============================>.] - ETA: 0s - loss: 0.1574 - acc: 0.7746\n",
            "Epoch 00065: val_loss improved from 0.16228 to 0.16210, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 55s 242us/sample - loss: 0.1574 - acc: 0.7746 - val_loss: 0.1621 - val_acc: 0.7669\n",
            "Epoch 66/220\n",
            "226304/226402 [============================>.] - ETA: 0s - loss: 0.1572 - acc: 0.7750\n",
            "Epoch 00066: val_loss improved from 0.16210 to 0.16198, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 54s 240us/sample - loss: 0.1572 - acc: 0.7750 - val_loss: 0.1620 - val_acc: 0.7672\n",
            "Epoch 67/220\n",
            "  3776/226402 [..............................] - ETA: 50s - loss: 0.1560 - acc: 0.7725Buffered data was truncated after reaching the output size limit."
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0WRArTDWmbG1",
        "colab_type": "code",
        "outputId": "da92cbce-58d2-4563-9e58-f0468119c1bb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot training & validation accuracy values\n",
        "plt.plot(hist.history['acc'])\n",
        "plt.plot(hist.history['val_acc'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.savefig(\"abc76.png\")\n",
        "plt.show()\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(hist.history['loss'])\n",
        "plt.plot(hist.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.savefig(\"bc76.png\")\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tpDQnvTon84S",
        "colab_type": "code",
        "outputId": "eb841f05-7827-44bb-ab9b-f15b70c2677f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        }
      },
      "source": [
        "model.load_weights(weight_path)\n",
        "score, acc = model.evaluate([x_validate['left'], x_validate['right']], y_validate, batch_size=batch_size)\n",
        "print('Test score:', score)\n",
        "print('Test accuracy:', acc)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "121287/121287 [==============================] - 13s 105us/sample - loss: 0.1495 - acc: 0.7886\n",
            "Test score: 0.1494559750498529\n",
            "Test accuracy: 0.7886336\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}