{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DQD_mohit.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MohitDhungana/duplicate_question_detection/blob/master/subinDqD_unstable\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wkJvn2LQhlRq",
        "colab_type": "code",
        "outputId": "064d3644-2cfc-4540-aa67-16fbc74ba3f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        }
      },
      "source": [
        "from time import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from gensim.models import KeyedVectors\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "nltk.download('stopwords')\n",
        "\n",
        "import itertools\n",
        "import datetime\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w572jSYxhwS2",
        "colab_type": "code",
        "outputId": "13c0ff13-6163-4f07-d7d3-2367a29adad4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        }
      },
      "source": [
        "!ls '/content/drive/My Drive'\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "'Colab Notebooks'\n",
            " Compressed\n",
            " dogs-cats-images.zip\n",
            " dqd_model_weights.h5\n",
            "'energy environment and society  assignment.pdf'\n",
            " GoogleNews-vectors-negative300.bin.gz\n",
            " image-93b016bfc7ea033589b8766d020d99cb0108180bdaa53d05dbdaf5883674852e-V.jpg\n",
            " Keygen.exe\n",
            " KIC072BCT039.jpg\n",
            "'New Doc 2019-03-03 12.05.252394441364277969478.pdf'\n",
            " Project\n",
            " the-new-encyclopedia-of-modern-bodybuilding-arnold.pdf\n",
            " train.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tGikGcvYhw0d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv('/content/drive/My Drive/train.csv')\n",
        "stops = set(stopwords.words('english'))\n",
        "\n",
        "def text_to_word_list(text):\n",
        "#   gets a whole question inside text variable on which  preprocessing is done and then the question is splitted into word indices and returned\n",
        "    text = str(text)\n",
        "    text = text.lower()\n",
        "\n",
        "    # Clean the text\n",
        "    text = re.sub(r\"[^A-Za-z0-9^,!.\\/'+-=]\", \" \", text)\n",
        "    text = re.sub(r\"what's\", \"what is \", text)\n",
        "    text = re.sub(r\"\\'s\", \" \", text)\n",
        "    text = re.sub(r\"\\'ve\", \" have \", text)\n",
        "    text = re.sub(r\"can't\", \"cannot \", text)\n",
        "    text = re.sub(r\"n't\", \" not \", text)\n",
        "    text = re.sub(r\"i'm\", \"i am \", text)\n",
        "    text = re.sub(r\"\\'re\", \" are \", text)\n",
        "    text = re.sub(r\"\\'d\", \" would \", text)\n",
        "    text = re.sub(r\"\\'ll\", \" will \", text)\n",
        "    text = re.sub(r\",\", \" \", text)\n",
        "    text = re.sub(r\"\\.\", \" \", text)\n",
        "    text = re.sub(r\"!\", \" ! \", text)\n",
        "    text = re.sub(r\"\\/\", \" \", text)\n",
        "    text = re.sub(r\"\\^\", \" ^ \", text)\n",
        "    text = re.sub(r\"\\+\", \" + \", text)\n",
        "    text = re.sub(r\"\\-\", \" - \", text)\n",
        "    text = re.sub(r\"\\=\", \" = \", text)\n",
        "    text = re.sub(r\"'\", \" \", text)\n",
        "    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n",
        "    text = re.sub(r\":\", \" : \", text)\n",
        "    text = re.sub(r\" e g \", \" eg \", text)\n",
        "    text = re.sub(r\" b g \", \" bg \", text)\n",
        "    text = re.sub(r\" u s \", \" american \", text)\n",
        "    text = re.sub(r\"\\0s\", \"0\", text)\n",
        "    text = re.sub(r\" 9 11 \", \"911\", text)\n",
        "    text = re.sub(r\"e - mail\", \"email\", text)\n",
        "    text = re.sub(r\"j k\", \"jk\", text)\n",
        "    text = re.sub(r\"\\s{2,}\", \" \", text)\n",
        "\n",
        "    text = text.split()\n",
        "\n",
        "    return text\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QXOMPzOgh0RX",
        "colab_type": "code",
        "outputId": "4ec87aa9-681d-4ba9-e046-ef05bcdbae8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        }
      },
      "source": [
        "# Prepare embedding\n",
        "\n",
        "vocabulary = dict() \n",
        "inverse_vocabulary = ['<unk>']  # '<unk>' will never be used, it is only a placeholder for the [0, 0, ....0] embedding\n",
        "word2vec = KeyedVectors.load_word2vec_format('/content/drive/My Drive/GoogleNews-vectors-negative300.bin.gz', binary=True)\n",
        "\n",
        "questions_cols = ['question1', 'question2']\n",
        "\n",
        "# Iterate over the questions(i.e. 'question 1', 'question2') of the training sets provided \n",
        "# get the data from dataset(df) in  variable dataset\n",
        "for dataset in [df]:\n",
        "#   now iterate through the rows of the dataset using  index as iterator (i.e. goes through the row having particular index at a time) \n",
        "    for index, row in dataset.iterrows():\n",
        "\n",
        "        # Iterate through the text of both questions within the current  row\n",
        "        for question in questions_cols:\n",
        "            que2no = []  # que2no ->  numbers representation of the cureently being processed question\n",
        "            \n",
        "            count_ = 0\n",
        "\n",
        "            for word in text_to_word_list(row[question]):\n",
        "\n",
        "                # Check for unwanted words i.e mainly stopwords\n",
        "                if word in stops and word not in word2vec.vocab:\n",
        "                    continue\n",
        "                    \n",
        "#                 limit the length to 50, this decreased the time to train an epoch from more than 1 hour to 20 minutes.\n",
        "                if count_ >= 50 :\n",
        "                  continue\n",
        "                count_ +=1\n",
        "                \n",
        "                \n",
        "                if word not in vocabulary:\n",
        "                    vocabulary[word] = len(inverse_vocabulary)\n",
        "                    que2no.append(len(inverse_vocabulary))\n",
        "                    inverse_vocabulary.append(word)\n",
        "                else:\n",
        "                    que2no.append(vocabulary[word])\n",
        "#                     que2no.append(float(vocabulary[word]))\n",
        "\n",
        "#                 que2no=list(map(int,que2no))\n",
        "\n",
        "            # Replace questions as word to question as number representation\n",
        "            dataset.set_value(index, question, que2no)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/smart_open/smart_open_lib.py:398: UserWarning: This function is deprecated, use smart_open.open instead. See the migration notes for details: https://github.com/RaRe-Technologies/smart_open/blob/master/README.rst#migrating-to-the-new-open-function\n",
            "  'See the migration notes for details: %s' % _MIGRATION_NOTES_URL\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:43: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HzWyW5V9h3cz",
        "colab_type": "code",
        "outputId": "dae0be0e-6c3c-4e13-eb43-ff9857e25a4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        }
      },
      "source": [
        "# max_sequence_length=50\n",
        "max_seq_length = max(df.question1.map(lambda x: len(x)).max(),\n",
        "                     df.question2.map(lambda x: len(x)).max()\n",
        "                    )\n",
        "# max_seq_length\n",
        "df.tail()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>qid1</th>\n",
              "      <th>qid2</th>\n",
              "      <th>question1</th>\n",
              "      <th>question2</th>\n",
              "      <th>is_duplicate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>404285</th>\n",
              "      <td>404285</td>\n",
              "      <td>433578</td>\n",
              "      <td>379845</td>\n",
              "      <td>[26, 184, 3632, 115, 307, 8, 3, 24585, 522, 52...</td>\n",
              "      <td>[26, 184, 3632, 115, 307, 8, 12032, 522, 523, ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404286</th>\n",
              "      <td>404286</td>\n",
              "      <td>18840</td>\n",
              "      <td>155606</td>\n",
              "      <td>[97, 99, 2441, 307, 2, 598, 180, 1822]</td>\n",
              "      <td>[2, 47, 467, 77, 307, 2, 598, 180, 1822]</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404287</th>\n",
              "      <td>404287</td>\n",
              "      <td>537928</td>\n",
              "      <td>537929</td>\n",
              "      <td>[1, 2, 57, 11012]</td>\n",
              "      <td>[1, 2, 83, 11012]</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404288</th>\n",
              "      <td>404288</td>\n",
              "      <td>537930</td>\n",
              "      <td>537931</td>\n",
              "      <td>[1, 2, 3, 21205, 12587, 534, 2769, 33, 3114, 8...</td>\n",
              "      <td>[16, 42, 1086, 2877, 2854, 2622, 1220, 16, 173...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>404289</th>\n",
              "      <td>404289</td>\n",
              "      <td>537932</td>\n",
              "      <td>537933</td>\n",
              "      <td>[1, 2, 139, 401, 2543, 175, 7227]</td>\n",
              "      <td>[1, 2, 47, 139, 401, 2543, 175, 135, 7227]</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            id  ...  is_duplicate\n",
              "404285  404285  ...             0\n",
              "404286  404286  ...             1\n",
              "404287  404287  ...             0\n",
              "404288  404288  ...             0\n",
              "404289  404289  ...             0\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ODpAYNEJh6Kv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "embedding_dim = 300\n",
        "# creating an embedding matrix whose length is one more than vocabulary and dimension is 300\n",
        "embedding_matrix = 1 * np.random.randn(len(vocabulary) + 1, embedding_dim)  \n",
        "embedding_matrix[0] = 0  # So that the zeroth place remain empty \n",
        "\n",
        "# (Build the embedding matrix) Assigning the word2vec embedding for each words of our vocabulary  \n",
        "for word, index in vocabulary.items():\n",
        "    if word in word2vec.vocab:\n",
        "        embedding_matrix[index] = word2vec.word_vec(word)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m-yFAqaSh7-7",
        "colab_type": "code",
        "outputId": "86750a0d-3731-44e4-c4eb-49a8bee03daa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "X=df[questions_cols]\n",
        "Y=df['is_duplicate']\n",
        "\n",
        "\n",
        "x_train,x_validate,y_train,y_validate = train_test_split(X, Y, test_size = 0.3) # dataset split to 70% for training and 30% for validation\n",
        "\n",
        "print(x_train.shape)\n",
        "print(x_validate.shape)\n",
        "print(y_train.shape)\n",
        "print(y_validate.shape)\n",
        "                 \n",
        "# Split to dicts\n",
        "x_train = {'left': x_train.question1, 'right': x_train.question2}\n",
        "x_validate = {'left': x_validate.question1, 'right': x_validate.question2}\n",
        "\n",
        "# Convert labels to their numpy representations\n",
        "y_train=y_train.values\n",
        "y_validate=y_validate.values"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(283003, 2)\n",
            "(121287, 2)\n",
            "(283003,)\n",
            "(121287,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JL944Kjoh-eP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "\n",
        "# zero padding\n",
        "\n",
        "for dataset, side in itertools.product([x_train,x_validate],['left','right']):\n",
        "  dataset[side] = pad_sequences(dataset[side], maxlen = max_seq_length)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pS5Q7ILBiB-9",
        "colab_type": "code",
        "outputId": "9aeb17d7-ffe4-4ba2-dd46-4509a34c0a55",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        }
      },
      "source": [
        "# print(df['question1'][0])\n",
        "\n",
        "# print(dataset)\n",
        "print(x_train['left'].shape)\n",
        "# print(x_train['left'])\n",
        "print(x_validate['left'].shape)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(283003, 50)\n",
            "(121287, 50)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q8IPUompiDlb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# check to see if shape of left and right input is same\n",
        "assert x_train['left'].shape == x_train['right'].shape\n",
        "\n",
        "# check to see if shape of input and output is same\n",
        "assert len(x_train['left']) == len(y_train)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sTLKKuQbiFI-",
        "colab_type": "code",
        "outputId": "4b78f230-837e-404e-866f-728480169f89",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "# shape of question1 column (x,y)==(total rows, total words in each question)\n",
        "x_train['left'].shape"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(283003, 50)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OisOL0zPiGmG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# manhattan distance calculation function\n",
        "import tensorflow.keras.backend as K\n",
        "def manhattan_distance(left,right):\n",
        "  return K.exp(-K.sum(K.abs(left-right),axis=1, keepdims=True))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ABUxQznmiJVc",
        "colab_type": "code",
        "outputId": "95b2511d-6228-4921-d09a-f1ed63036a3e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 706
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Input, Embedding, LSTM, Lambda, CuDNNLSTM,Bidirectional\n",
        "\n",
        "\n",
        "n_hidden = 25\n",
        "n_epochs=500\n",
        "gradient_clipping_norm  = 1\n",
        "batch_size=100\n",
        "\n",
        "# input layer\n",
        "#recheck shape before training\n",
        "left_input = Input(shape = (max_seq_length,), dtype='int32',name = 'left_input')\n",
        "right_input = Input(shape = (max_seq_length,), dtype='int32', name = 'right_input')\n",
        "\n",
        "\n",
        "\n",
        "# embedding layer\n",
        "# recheck dims \n",
        "embedding_layer = Embedding(input_dim = len(embedding_matrix), output_dim = embedding_dim, input_length = max_seq_length, weights=[embedding_matrix], trainable=False, name = 'embedding_layer')\n",
        "\n",
        "encoded_left = embedding_layer(left_input)\n",
        "encoded_right = embedding_layer(right_input)\n",
        "\n",
        "\n",
        "\n",
        "#LSTM instantiation\n",
        "# check parameter for LSTM.\n",
        "shared_lstm = Bidirectional(CuDNNLSTM(n_hidden, name = 'LSTM_layer'))\n",
        "\n",
        "# shared LSTM\n",
        "left_output = shared_lstm(encoded_left)\n",
        "right_output = shared_lstm(encoded_right)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# TODO: check output shape of the output lambda layer\n",
        "# output layer\n",
        "output_layer = Lambda(function = lambda x : manhattan_distance(x[0], x[1]),output_shape=lambda x: (x[0][0],1))([left_output, right_output])\n",
        "\n",
        "\n",
        "\n",
        "# define above model\n",
        "model = tf.keras.Model(inputs=[left_input, right_input], outputs=output_layer)\n",
        "\n",
        "# summary of model\n",
        "print(model.summary())"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING: Logging before flag parsing goes to stderr.\n",
            "W0625 16:47:39.724927 140316830119808 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/initializers.py:119: calling RandomUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "W0625 16:47:43.234878 140316830119808 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "W0625 16:47:43.243731 140316830119808 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:97: calling GlorotUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "W0625 16:47:43.249983 140316830119808 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:97: calling Orthogonal.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n",
            "W0625 16:47:43.251297 140316830119808 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:97: calling Zeros.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "left_input (InputLayer)         [(None, 50)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "right_input (InputLayer)        [(None, 50)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "embedding_layer (Embedding)     (None, 50, 300)      25796400    left_input[0][0]                 \n",
            "                                                                 right_input[0][0]                \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional (Bidirectional)   (None, 50)           65400       embedding_layer[0][0]            \n",
            "                                                                 embedding_layer[1][0]            \n",
            "__________________________________________________________________________________________________\n",
            "lambda (Lambda)                 (None, 1)            0           bidirectional[0][0]              \n",
            "                                                                 bidirectional[1][0]              \n",
            "==================================================================================================\n",
            "Total params: 25,861,800\n",
            "Trainable params: 65,400\n",
            "Non-trainable params: 25,796,400\n",
            "__________________________________________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fQE1FClviLvP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# compile the model\n",
        "\n",
        "from time import time\n",
        "from tensorflow.keras.optimizers import Adadelta\n",
        "from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\n",
        "# from tensorflow.keras.callbacks import TensorBoard\n",
        "\n",
        "\n",
        "# LOG_DIR=\"/root/logs\"\n",
        "# tensorboard = TensorBoard(log_dir=LOG_DIR.format(time()))\n",
        "\n",
        "weight_path='/content/drive/My Drive/dqd_model_weights.h5'\n",
        "\n",
        "checkpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n",
        "early_stopping = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=5)\n",
        "callbacks = [checkpoint, early_stopping]\n",
        "\n",
        "optimizer = Adadelta(lr=1, clipnorm = gradient_clipping_norm)\n",
        "model.compile(optimizer = optimizer, loss = 'mean_absolute_error', metrics = ['accuracy'])\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAQV83GDkjS2",
        "colab_type": "code",
        "outputId": "854b6de9-0c47-47a1-c65f-fafc506a44da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "# train (fit) the model\n",
        "\n",
        "training_start_time = time()\n",
        "hist = model.fit([x_train['left'], x_train['right']], y_train, \n",
        "                 batch_size=batch_size,\n",
        "                 epochs=n_epochs, \n",
        "                 shuffle = True, \n",
        "                 validation_split=0.20, \n",
        "                 callbacks=callbacks)\n",
        "print(hist.history)\n",
        "print(\"Training time finished.\\n{} epochs in {}\".format(n_epochs, datetime.timedelta(seconds=time()-training_start_time)))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 226402 samples, validate on 56601 samples\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "W0625 16:47:44.222144 140316830119808 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/clip_ops.py:157: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.3110 - acc: 0.7079\n",
            "Epoch 00001: val_loss improved from inf to 0.29401, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 49s 218us/sample - loss: 0.3109 - acc: 0.7080 - val_loss: 0.2940 - val_acc: 0.7216\n",
            "Epoch 2/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2860 - acc: 0.7286\n",
            "Epoch 00002: val_loss improved from 0.29401 to 0.28479, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 200us/sample - loss: 0.2859 - acc: 0.7286 - val_loss: 0.2848 - val_acc: 0.7290\n",
            "Epoch 3/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2773 - acc: 0.7378\n",
            "Epoch 00003: val_loss did not improve from 0.28479\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2773 - acc: 0.7378 - val_loss: 0.2893 - val_acc: 0.7231\n",
            "Epoch 4/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2721 - acc: 0.7427\n",
            "Epoch 00004: val_loss improved from 0.28479 to 0.27354, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 79s 348us/sample - loss: 0.2720 - acc: 0.7428 - val_loss: 0.2735 - val_acc: 0.7394\n",
            "Epoch 5/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2682 - acc: 0.7465\n",
            "Epoch 00005: val_loss improved from 0.27354 to 0.27117, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 205us/sample - loss: 0.2682 - acc: 0.7465 - val_loss: 0.2712 - val_acc: 0.7418\n",
            "Epoch 6/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2652 - acc: 0.7488\n",
            "Epoch 00006: val_loss improved from 0.27117 to 0.27011, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 205us/sample - loss: 0.2651 - acc: 0.7488 - val_loss: 0.2701 - val_acc: 0.7412\n",
            "Epoch 7/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2629 - acc: 0.7514\n",
            "Epoch 00007: val_loss did not improve from 0.27011\n",
            "226402/226402 [==============================] - 44s 194us/sample - loss: 0.2629 - acc: 0.7514 - val_loss: 0.2727 - val_acc: 0.7418\n",
            "Epoch 8/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2605 - acc: 0.7539\n",
            "Epoch 00008: val_loss improved from 0.27011 to 0.26706, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 200us/sample - loss: 0.2605 - acc: 0.7539 - val_loss: 0.2671 - val_acc: 0.7453\n",
            "Epoch 9/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2587 - acc: 0.7554\n",
            "Epoch 00009: val_loss improved from 0.26706 to 0.26680, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 204us/sample - loss: 0.2586 - acc: 0.7555 - val_loss: 0.2668 - val_acc: 0.7445\n",
            "Epoch 10/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2571 - acc: 0.7571\n",
            "Epoch 00010: val_loss improved from 0.26680 to 0.26479, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 201us/sample - loss: 0.2571 - acc: 0.7571 - val_loss: 0.2648 - val_acc: 0.7475\n",
            "Epoch 11/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2556 - acc: 0.7588\n",
            "Epoch 00011: val_loss improved from 0.26479 to 0.26316, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 47s 207us/sample - loss: 0.2555 - acc: 0.7589 - val_loss: 0.2632 - val_acc: 0.7497\n",
            "Epoch 12/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2542 - acc: 0.7603\n",
            "Epoch 00012: val_loss improved from 0.26316 to 0.26202, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 203us/sample - loss: 0.2542 - acc: 0.7604 - val_loss: 0.2620 - val_acc: 0.7506\n",
            "Epoch 13/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2529 - acc: 0.7621\n",
            "Epoch 00013: val_loss improved from 0.26202 to 0.26119, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 203us/sample - loss: 0.2528 - acc: 0.7622 - val_loss: 0.2612 - val_acc: 0.7527\n",
            "Epoch 14/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2517 - acc: 0.7631\n",
            "Epoch 00014: val_loss improved from 0.26119 to 0.26014, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 48s 213us/sample - loss: 0.2517 - acc: 0.7631 - val_loss: 0.2601 - val_acc: 0.7516\n",
            "Epoch 15/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2505 - acc: 0.7638\n",
            "Epoch 00015: val_loss improved from 0.26014 to 0.25972, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 202us/sample - loss: 0.2505 - acc: 0.7638 - val_loss: 0.2597 - val_acc: 0.7523\n",
            "Epoch 16/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2494 - acc: 0.7649\n",
            "Epoch 00016: val_loss did not improve from 0.25972\n",
            "226402/226402 [==============================] - 44s 194us/sample - loss: 0.2494 - acc: 0.7649 - val_loss: 0.2603 - val_acc: 0.7518\n",
            "Epoch 17/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2482 - acc: 0.7659\n",
            "Epoch 00017: val_loss improved from 0.25972 to 0.25833, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 199us/sample - loss: 0.2482 - acc: 0.7659 - val_loss: 0.2583 - val_acc: 0.7535\n",
            "Epoch 18/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2470 - acc: 0.7677\n",
            "Epoch 00018: val_loss did not improve from 0.25833\n",
            "226402/226402 [==============================] - 44s 192us/sample - loss: 0.2471 - acc: 0.7677 - val_loss: 0.2587 - val_acc: 0.7530\n",
            "Epoch 19/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2467 - acc: 0.7681\n",
            "Epoch 00019: val_loss improved from 0.25833 to 0.25719, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 200us/sample - loss: 0.2467 - acc: 0.7681 - val_loss: 0.2572 - val_acc: 0.7544\n",
            "Epoch 20/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2456 - acc: 0.7692\n",
            "Epoch 00020: val_loss did not improve from 0.25719\n",
            "226402/226402 [==============================] - 44s 192us/sample - loss: 0.2456 - acc: 0.7692 - val_loss: 0.2591 - val_acc: 0.7519\n",
            "Epoch 21/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2445 - acc: 0.7701\n",
            "Epoch 00021: val_loss improved from 0.25719 to 0.25591, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 200us/sample - loss: 0.2445 - acc: 0.7701 - val_loss: 0.2559 - val_acc: 0.7556\n",
            "Epoch 22/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2440 - acc: 0.7703\n",
            "Epoch 00022: val_loss improved from 0.25591 to 0.25532, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 204us/sample - loss: 0.2439 - acc: 0.7703 - val_loss: 0.2553 - val_acc: 0.7559\n",
            "Epoch 23/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2430 - acc: 0.7712\n",
            "Epoch 00023: val_loss did not improve from 0.25532\n",
            "226402/226402 [==============================] - 44s 193us/sample - loss: 0.2430 - acc: 0.7712 - val_loss: 0.2554 - val_acc: 0.7548\n",
            "Epoch 24/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2422 - acc: 0.7720\n",
            "Epoch 00024: val_loss improved from 0.25532 to 0.25465, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 197us/sample - loss: 0.2422 - acc: 0.7720 - val_loss: 0.2546 - val_acc: 0.7561\n",
            "Epoch 25/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2414 - acc: 0.7729\n",
            "Epoch 00025: val_loss improved from 0.25465 to 0.25371, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 203us/sample - loss: 0.2414 - acc: 0.7729 - val_loss: 0.2537 - val_acc: 0.7583\n",
            "Epoch 26/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2406 - acc: 0.7737\n",
            "Epoch 00026: val_loss improved from 0.25371 to 0.25326, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2406 - acc: 0.7736 - val_loss: 0.2533 - val_acc: 0.7580\n",
            "Epoch 27/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2399 - acc: 0.7744\n",
            "Epoch 00027: val_loss did not improve from 0.25326\n",
            "226402/226402 [==============================] - 44s 193us/sample - loss: 0.2398 - acc: 0.7744 - val_loss: 0.2541 - val_acc: 0.7575\n",
            "Epoch 28/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2393 - acc: 0.7750\n",
            "Epoch 00028: val_loss improved from 0.25326 to 0.25313, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2393 - acc: 0.7750 - val_loss: 0.2531 - val_acc: 0.7583\n",
            "Epoch 29/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2389 - acc: 0.7753\n",
            "Epoch 00029: val_loss improved from 0.25313 to 0.25246, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 201us/sample - loss: 0.2389 - acc: 0.7753 - val_loss: 0.2525 - val_acc: 0.7581\n",
            "Epoch 30/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2381 - acc: 0.7758\n",
            "Epoch 00030: val_loss did not improve from 0.25246\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2381 - acc: 0.7758 - val_loss: 0.2543 - val_acc: 0.7565\n",
            "Epoch 31/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2376 - acc: 0.7766\n",
            "Epoch 00031: val_loss improved from 0.25246 to 0.25181, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2376 - acc: 0.7766 - val_loss: 0.2518 - val_acc: 0.7599\n",
            "Epoch 32/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2371 - acc: 0.7768\n",
            "Epoch 00032: val_loss improved from 0.25181 to 0.25136, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 205us/sample - loss: 0.2371 - acc: 0.7767 - val_loss: 0.2514 - val_acc: 0.7596\n",
            "Epoch 33/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2367 - acc: 0.7770\n",
            "Epoch 00033: val_loss did not improve from 0.25136\n",
            "226402/226402 [==============================] - 43s 190us/sample - loss: 0.2367 - acc: 0.7770 - val_loss: 0.2537 - val_acc: 0.7561\n",
            "Epoch 34/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2362 - acc: 0.7776\n",
            "Epoch 00034: val_loss improved from 0.25136 to 0.25097, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 46s 201us/sample - loss: 0.2362 - acc: 0.7776 - val_loss: 0.2510 - val_acc: 0.7595\n",
            "Epoch 35/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2359 - acc: 0.7779\n",
            "Epoch 00035: val_loss did not improve from 0.25097\n",
            "226402/226402 [==============================] - 44s 192us/sample - loss: 0.2359 - acc: 0.7779 - val_loss: 0.2510 - val_acc: 0.7591\n",
            "Epoch 36/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2352 - acc: 0.7787\n",
            "Epoch 00036: val_loss did not improve from 0.25097\n",
            "226402/226402 [==============================] - 43s 190us/sample - loss: 0.2352 - acc: 0.7787 - val_loss: 0.2515 - val_acc: 0.7590\n",
            "Epoch 37/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2347 - acc: 0.7789\n",
            "Epoch 00037: val_loss improved from 0.25097 to 0.25079, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 201us/sample - loss: 0.2348 - acc: 0.7789 - val_loss: 0.2508 - val_acc: 0.7594\n",
            "Epoch 38/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2344 - acc: 0.7792\n",
            "Epoch 00038: val_loss improved from 0.25079 to 0.24956, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 199us/sample - loss: 0.2344 - acc: 0.7792 - val_loss: 0.2496 - val_acc: 0.7610\n",
            "Epoch 39/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2339 - acc: 0.7799\n",
            "Epoch 00039: val_loss did not improve from 0.24956\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2339 - acc: 0.7799 - val_loss: 0.2497 - val_acc: 0.7607\n",
            "Epoch 40/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2336 - acc: 0.7801\n",
            "Epoch 00040: val_loss did not improve from 0.24956\n",
            "226402/226402 [==============================] - 43s 190us/sample - loss: 0.2336 - acc: 0.7801 - val_loss: 0.2513 - val_acc: 0.7594\n",
            "Epoch 41/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2332 - acc: 0.7804\n",
            "Epoch 00041: val_loss did not improve from 0.24956\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2333 - acc: 0.7804 - val_loss: 0.2500 - val_acc: 0.7604\n",
            "Epoch 42/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2329 - acc: 0.7807\n",
            "Epoch 00042: val_loss improved from 0.24956 to 0.24903, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2329 - acc: 0.7807 - val_loss: 0.2490 - val_acc: 0.7612\n",
            "Epoch 43/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2325 - acc: 0.7810\n",
            "Epoch 00043: val_loss improved from 0.24903 to 0.24898, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2325 - acc: 0.7810 - val_loss: 0.2490 - val_acc: 0.7610\n",
            "Epoch 44/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2322 - acc: 0.7813\n",
            "Epoch 00044: val_loss improved from 0.24898 to 0.24880, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 200us/sample - loss: 0.2322 - acc: 0.7813 - val_loss: 0.2488 - val_acc: 0.7611\n",
            "Epoch 45/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2320 - acc: 0.7813\n",
            "Epoch 00045: val_loss did not improve from 0.24880\n",
            "226402/226402 [==============================] - 44s 192us/sample - loss: 0.2320 - acc: 0.7813 - val_loss: 0.2493 - val_acc: 0.7604\n",
            "Epoch 46/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2316 - acc: 0.7817\n",
            "Epoch 00046: val_loss did not improve from 0.24880\n",
            "226402/226402 [==============================] - 43s 190us/sample - loss: 0.2316 - acc: 0.7817 - val_loss: 0.2511 - val_acc: 0.7585\n",
            "Epoch 47/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2311 - acc: 0.7824\n",
            "Epoch 00047: val_loss improved from 0.24880 to 0.24876, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 199us/sample - loss: 0.2312 - acc: 0.7823 - val_loss: 0.2488 - val_acc: 0.7612\n",
            "Epoch 48/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2310 - acc: 0.7826\n",
            "Epoch 00048: val_loss did not improve from 0.24876\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2310 - acc: 0.7826 - val_loss: 0.2498 - val_acc: 0.7603\n",
            "Epoch 49/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2305 - acc: 0.7829\n",
            "Epoch 00049: val_loss did not improve from 0.24876\n",
            "226402/226402 [==============================] - 43s 191us/sample - loss: 0.2305 - acc: 0.7829 - val_loss: 0.2494 - val_acc: 0.7593\n",
            "Epoch 50/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2302 - acc: 0.7830\n",
            "Epoch 00050: val_loss improved from 0.24876 to 0.24872, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 44s 195us/sample - loss: 0.2302 - acc: 0.7830 - val_loss: 0.2487 - val_acc: 0.7609\n",
            "Epoch 51/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2301 - acc: 0.7831\n",
            "Epoch 00051: val_loss improved from 0.24872 to 0.24818, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 198us/sample - loss: 0.2301 - acc: 0.7831 - val_loss: 0.2482 - val_acc: 0.7611\n",
            "Epoch 52/500\n",
            "226100/226402 [============================>.] - ETA: 0s - loss: 0.2297 - acc: 0.7835\n",
            "Epoch 00052: val_loss improved from 0.24818 to 0.24790, saving model to /content/drive/My Drive/dqd_model_weights.h5\n",
            "226402/226402 [==============================] - 45s 199us/sample - loss: 0.2297 - acc: 0.7834 - val_loss: 0.2479 - val_acc: 0.7611\n",
            "Epoch 53/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2293 - acc: 0.7837\n",
            "Epoch 00053: val_loss did not improve from 0.24790\n",
            "226402/226402 [==============================] - 43s 192us/sample - loss: 0.2294 - acc: 0.7836 - val_loss: 0.2493 - val_acc: 0.7600\n",
            "Epoch 54/500\n",
            "226400/226402 [============================>.] - ETA: 0s - loss: 0.2291 - acc: 0.7839\n",
            "Epoch 00054: val_loss did not improve from 0.24790\n",
            "226402/226402 [==============================] - 43s 190us/sample - loss: 0.2291 - acc: 0.7839 - val_loss: 0.2482 - val_acc: 0.7611\n",
            "Epoch 55/500\n",
            "226200/226402 [============================>.] - ETA: 0s - loss: 0.2291 - acc: 0.7839\n",
            "Epoch 00055: val_loss did not improve from 0.24790\n",
            "226402/226402 [==============================] - 43s 188us/sample - loss: 0.2290 - acc: 0.7839 - val_loss: 0.2480 - val_acc: 0.7616\n",
            "Epoch 56/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2286 - acc: 0.7843\n",
            "Epoch 00056: val_loss did not improve from 0.24790\n",
            "226402/226402 [==============================] - 43s 192us/sample - loss: 0.2286 - acc: 0.7843 - val_loss: 0.2479 - val_acc: 0.7610\n",
            "Epoch 57/500\n",
            "226300/226402 [============================>.] - ETA: 0s - loss: 0.2284 - acc: 0.7847\n",
            "Epoch 00057: val_loss did not improve from 0.24790\n",
            "226402/226402 [==============================] - 43s 189us/sample - loss: 0.2284 - acc: 0.7848 - val_loss: 0.2484 - val_acc: 0.7609\n",
            "{'loss': [0.3109341769845299, 0.2859445202165775, 0.2772809717031466, 0.2720271371170524, 0.2682019748806964, 0.2651467842854208, 0.26287529934570025, 0.2604735133711914, 0.25864764962833164, 0.25712945347388255, 0.25551924465947357, 0.25418656849198534, 0.25283129660470605, 0.25166546137204165, 0.25051282722131046, 0.24942619440326022, 0.24824687425037648, 0.24706913182060863, 0.24665988265934666, 0.24562746332148377, 0.24451800841528484, 0.24394973882293394, 0.2430402882354525, 0.24220507506202912, 0.2414001781828139, 0.24064027375888808, 0.23984983251265016, 0.23932276512718018, 0.23889312375941218, 0.23814748386347534, 0.2375700580442408, 0.2371362642285059, 0.23673367339816348, 0.2361601920782345, 0.2359306274173605, 0.23518090904316608, 0.23476660869463875, 0.23443127438895875, 0.23394357483576717, 0.23357438251935994, 0.23326038516643707, 0.23287725842880164, 0.23247089468974005, 0.23216977993356303, 0.23196862511925342, 0.2315837336541846, 0.23116087904799518, 0.23097749077902352, 0.23052341251665792, 0.23019003747446812, 0.2300625775243407, 0.22966498557329673, 0.2293529399872382, 0.22911707417367166, 0.22903609646145312, 0.22858476562621718, 0.22838777427471635], 'acc': [0.70798403, 0.7285978, 0.73782474, 0.7427894, 0.7464996, 0.7487831, 0.75136703, 0.7539068, 0.7554615, 0.75705606, 0.75886256, 0.76035106, 0.7621929, 0.7630675, 0.76379186, 0.76485634, 0.7658501, 0.76768315, 0.76808506, 0.76917166, 0.7701301, 0.7702759, 0.7712299, 0.77198523, 0.7728951, 0.7736372, 0.7744499, 0.77496225, 0.7753288, 0.77575284, 0.7765523, 0.7767378, 0.7770161, 0.77758586, 0.7779437, 0.77872103, 0.77887565, 0.7791804, 0.7798871, 0.7801124, 0.78039503, 0.7806689, 0.7809825, 0.7812696, 0.78130496, 0.78170246, 0.78232086, 0.7825991, 0.7828641, 0.78303635, 0.78311145, 0.78344715, 0.7836194, 0.78391534, 0.78391093, 0.7843438, 0.78475016], 'val_loss': [0.29401489338439524, 0.28478811595261355, 0.2893051575757499, 0.27353624931837284, 0.27117285569430943, 0.2701097106133684, 0.2727361749810605, 0.26706408572402096, 0.2667965144990487, 0.2647880870763624, 0.26316465613458734, 0.26202387897213797, 0.26119068921390554, 0.2601376172569318, 0.25971577264961804, 0.26028896283366226, 0.25833040955727965, 0.25867801439541227, 0.2571921255254246, 0.25912183184827675, 0.2559148693768789, 0.2553243900815058, 0.25538254466567095, 0.2546475434999993, 0.253709352406505, 0.25326271581065646, 0.25412704011445814, 0.2531265345684027, 0.2524622429108954, 0.2543466598281477, 0.25180624402586, 0.2513620557754453, 0.2536557349616202, 0.2509675884173743, 0.2509676116296035, 0.25153639800822225, 0.2507902615163983, 0.24955866930104303, 0.24972248491985052, 0.25131395156049774, 0.24996234067357645, 0.24902537815234613, 0.2489770701306792, 0.2488023405155022, 0.2493187958978389, 0.2511226576683358, 0.24875755580675749, 0.24975114181969435, 0.24935121889643103, 0.2487223275430072, 0.24817995134843676, 0.24789686447714637, 0.24930248346852174, 0.24822498872165083, 0.24797709482794203, 0.24790870244021854, 0.24844735770080134], 'val_acc': [0.7216127, 0.7290154, 0.7230968, 0.73943925, 0.74178904, 0.74122363, 0.7418243, 0.74534017, 0.7444922, 0.7474603, 0.7497394, 0.75064045, 0.7526722, 0.7516298, 0.75231886, 0.7518242, 0.75353795, 0.75299025, 0.754439, 0.7519302, 0.7556404, 0.75585234, 0.7548453, 0.75606436, 0.7582552, 0.75802547, 0.7575308, 0.7583082, 0.75807846, 0.7565237, 0.7599336, 0.75963324, 0.7561174, 0.7595449, 0.7591032, 0.75896186, 0.7594212, 0.7609936, 0.76071095, 0.75935054, 0.7603929, 0.7611526, 0.7609583, 0.761135, 0.7604106, 0.7585378, 0.76117027, 0.7602869, 0.7593329, 0.7608876, 0.76109964, 0.761135, 0.7600042, 0.76109964, 0.761612, 0.7609936, 0.76092297]}\n",
            "Training time finished.\n",
            "500 epochs in 0:43:01.809533\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0WRArTDWmbG1",
        "colab_type": "code",
        "outputId": "d8b9c864-8027-4621-b3e8-4872692c81e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot training & validation accuracy values\n",
        "plt.plot(hist.history['acc'])\n",
        "plt.plot(hist.history['val_acc'])\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.savefig(\"abc76.png\")\n",
        "plt.show()\n",
        "\n",
        "# Plot training & validation loss values\n",
        "plt.plot(hist.history['loss'])\n",
        "plt.plot(hist.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Test'], loc='upper left')\n",
        "plt.savefig(\"bc76.png\")\n",
        "plt.show()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEWCAYAAACXGLsWAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xd8lfXZ+PHPlUUGCSEJYSSEREAQ\nZCMO3Dhw0loHqNW6qE/rqK2/1i61tvaxra31EZ76oOJW3EoVi7gHDvbeIxBGFtn7JNfvj+8dPYSE\nHCAn83q/XueV3PNcN8Zzne8WVcUYY4w5mJC2DsAYY0z7Z8nCGGNMsyxZGGOMaZYlC2OMMc2yZGGM\nMaZZliyMMcY0y5KF6fJEJF1EVETCAjj3RyLyeWvEZUx7YsnCdCgisl1EqkUkqcH+Zd4HfnrbRGZM\n52bJwnRE24Bp9RsiMgKIbrtw2odASkbGHC5LFqYjeha4xm/7WuAZ/xNEpIeIPCMiuSKSKSK/E5EQ\n71ioiDwoInkishW4oJFrnxCRPSKyS0T+JCKhgQQmIq+IyF4RKRKRT0VkuN+xKBH5uxdPkYh8LiJR\n3rGTRWShiBSKyE4R+ZG3/2MRudHvHvtVg3mlqZ+KyCZgk7fvYe8exSKyRERO8Ts/VER+IyJbRKTE\nO95fRGaKyN8bPMtcEbkjkOc2nZ8lC9MRfQXEicgx3of4VOC5Buc8AvQAjgJOwyWX67xjNwEXAmOA\n8cClDa59CvABg7xzzgFuJDDvAoOBZGAp8LzfsQeBccBJQALwS6BORAZ41z0C9AJGA8sDfD+A7wHH\nA8O87UXePRKAF4BXRCTSO/ZzXKnsfCAOuB4oB54Gpvkl1CTgLO96Y0BV7WWvDvMCtuM+xH4H/Dcw\nGVgAhAEKpAOhQDUwzO+6HwMfe79/CNzsd+wc79owoDdQBUT5HZ8GfOT9/iPg8wBjjffu2wP3xawC\nGNXIeb8G3mjiHh8DN/pt7/f+3v3PbCaOgvr3BTYAU5o4bx1wtvf7LcC8tv7vba/287I6TtNRPQt8\nCmTQoAoKSALCgUy/fZlAivd7P2Bng2P1BnjX7hGR+n0hDc5vlFfKuR+4DFdCqPOLpxsQCWxp5NL+\nTewP1H6xicidwA2451RcCaK+Q8DB3utp4Gpc8r0aePgIYjKdjFVDmQ5JVTNxDd3nA683OJwH1OA+\n+OulAbu83/fgPjT9j9XbiStZJKlqvPeKU9XhNO9KYAqu5NMDV8oBEC+mSmBgI9ftbGI/QBn7N973\naeScb6eO9tonfglcDvRU1XigyIuhufd6DpgiIqOAY4A3mzjPdEGWLExHdgOuCqbMf6eq1gIvA/eL\nSKzXJvBzvmvXeBm4TURSRaQncJfftXuA94C/i0iciISIyEAROS2AeGJxiSYf9wH/Z7/71gGzgX+I\nSD+voflEEemGa9c4S0QuF5EwEUkUkdHepcuBS0QkWkQGec/cXAw+IBcIE5G7cSWLeo8DfxSRweKM\nFJFEL8YsXHvHs8BrqloRwDObLsKShemwVHWLqi5u4vCtuG/lW4HPcQ21s71jjwHzgRW4RuiGJZNr\ngAhgLa6+/1WgbwAhPYOr0trlXftVg+N3AqtwH8j7gL8AIaq6A1dC+oW3fzkwyrvmIVz7Szaumuh5\nDm4+8B9goxdLJftXU/0DlyzfA4qBJ4Aov+NPAyNwCcOYb4mqLX5kjHFE5FRcCWyA2oeD8WMlC2MM\nACISDtwOPG6JwjRkycIYg4gcAxTiqtv+2cbhmHbIqqGMMcY0y0oWxhhjmtVpBuUlJSVpenp6W4dh\njDEdypIlS/JUtVdz53WaZJGens7ixU31ojTGGNMYEcls/iyrhjLGGBMASxbGGGOaZcnCGGNMszpN\nm0VjampqyMrKorKysq1DaTWRkZGkpqYSHh7e1qEYYzqRTp0ssrKyiI2NJT09Hb/ppjstVSU/P5+s\nrCwyMjLaOhxjTCfSqauhKisrSUxM7BKJAkBESExM7FIlKWNM6+jUyQLoMomiXld7XmNM6+jU1VDG\nGNNZlVX5WL+3mNW7igkPDeHK49Oav+gIWLIIovz8fCZNmgTA3r17CQ0NpVcvN1Dym2++ISIiotl7\nXHfdddx1110MGTIkqLEaY9qvksoaVu0qYlVWEat3F7NmdxHb8sqon9pvTFq8JYuOLDExkeXLlwNw\n77330r17d+688879zqlfDD0kpPEawSeffDLocRpjWl9JZQ2Z+eXs3FdOlc8t1+5fi5xfWs2qXUWs\nyCpka+53i0GmxEcxrF8cF4/qx/B+PTg2JY4+cZFBj9eSRRvYvHkzF198MWPGjGHZsmUsWLCAP/zh\nDyxdupSKigquuOIK7r77bgBOPvlkZsyYwbHHHktSUhI333wz7777LtHR0bz11lskJye38dMYY/yp\nKtnFVWQXV7KvrJr8smr2lVWRX1ZNTnEVmfllZOaXk19W3ey9esd1Y0RKPN8fncKI1B6MTI0nIab5\nGolg6DLJ4g//XsPa3cUtes9h/eK456Lhh3Xt+vXreeaZZxg/fjwADzzwAAkJCfh8Ps444wwuvfRS\nhg0btt81RUVFnHbaaTzwwAP8/Oc/Z/bs2dx1112N3d4Y04JUleJKH6VVPiprar1XHVU1tRRX1rAl\nt4wtuaVsySllS24ZpVW+A+4RERpCUvcIBiTGcM7w3gxIjCE9MZr+CdFER4RRv1xE/aIRsd3CSG6F\nEkOgukyyaG8GDhz4baIAePHFF3niiSfw+Xzs3r2btWvXHpAsoqKiOO+88wAYN24cn332WavGbExn\nVFlTy+7CCrIK6l/l7CqsIK+0ivzSavaVVVNQXk1N7cHX/ukTF8mg5O78YGwKg5K70y8+ip4xESTG\nRJAQE0H3bmEdurdil0kWh1sCCJaYmJhvf9+0aRMPP/ww33zzDfHx8Vx99dWNjpXwbxAPDQ3F5zvw\n24sx5kC1dcrKrEK25Jaxc59rJ9ixr5ydBeVkF1ftd25YiNA3PpKk7t1I7RnFyNQeJMR0IzEmgtjI\nMKIiQukWFkpkeAiR4aF07xbGgMRoYiM796wJXSZZtGfFxcXExsYSFxfHnj17mD9/PpMnT27rsIzp\n0ArKqvlkYy4frs/h0025FJbXAK4RuW9cJP0TojllcC/694ymf0IUqT2jSe0ZRe+4SEJDOm4JIFgs\nWbQDY8eOZdiwYQwdOpQBAwYwceLEtg7JmA6ltk7ZllfGmt1FrN1TzOLtBSzbUUCdQmJMBJOG9uaM\nob0Y3q8H/eIj6RYW2tYhdzidZg3u8ePHa8PFj9atW8cxxxzTRhG1na763KZzqayp/ba6KDO/nL3F\nlVT76qitU3x1Sm1dHTW1Lkms31tMZY3rfhoeKhzTN47ThyRz5tBkRqb0IMRKCk0SkSWqOr6584Ja\nshCRycDDQCjwuKo+0OD4Q8AZ3mY0kKyq8d6xvwIX4KYkWQDcrp0lsxljAKj21bGzoJxtuWVszStl\nW14ZW3PLvk0O/iLCQugWFkJYiBAWWv9TSImP4soJAxjWL47h/eIY2Ks7EWGdfiajVhe0ZCEiocBM\n4GwgC1gkInNVdW39Oap6h9/5twJjvN9PAiYCI73DnwOnAR8HK15jTMtTVfJKq11jcn2jstewvHNf\nBXuKKqjz+wqYGBNBRlIMEwclMSAxmrSEaNISoxmQEE1CTESH7k3U0QWzZDEB2KyqWwFEZA4wBVjb\nxPnTgHu83xWIBCIAAcKB7CDGaow5DFW+WrKLqthbXMne4kqyiyrZU1TJzoJyduS75FBRU7vfNcmx\n3eifEM1x6T3pn5BCRlIMGUkxHJXUnR7RnbtHUUcWzGSRAuz0284Cjm/sRBEZAGQAHwKo6pci8hGw\nB5csZqjqukaumw5MB0hLC+68KMYYZ+e+ct5ZtYd5q/awMqvogOPREaFeD6NoJg5KIi0higGJMd/2\nOIoMt8bljqi99IaaCryqqrUAIjIIOAZI9Y4vEJFTVHW/UWiqOguYBa6BuxXjNabL8NXWsT2/nA/W\nZTNv1R5WeAliZGoPbps0mNT4KPr0iPz2FdvBB5+ZxgUzWewC+vttp3r7GjMV+Knf9veBr1S1FEBE\n3gVOBGzIsjEtqLKmlsLyGgrKqyksr6GwvJq80iq25ZWzPb+MbXluEJvPa1gYmdqDu84bygUj+tI/\nIbqNozetKZjJYhEwWEQycEliKnBlw5NEZCjQE/jSb/cO4CYR+W9cNdRpwD+DGGtQtMQU5QCzZ8/m\n/PPPp0+fPkGL1XQdW3JLeX1pFm8u282uwopGz4kKD2VAYjRD+8Qy+dg+ZCTGcMJRiaQlWoLoqoKW\nLFTVJyK3APNxXWdnq+oaEbkPWKyqc71TpwJzGnSLfRU4E1iFa+z+j6r+O1ixBksgU5QHYvbs2Ywd\nO9aShTlsBWXVvL1yN68t3cXynYWECJx6dC+uPD6N+OhwekZHEB8VTnx0BEndI+gV282qksx+gtpm\noarzgHkN9t3dYPveRq6rBX4czNja2tNPP83MmTOprq7mpJNOYsaMGdTV1XHdddexfPlyVJXp06fT\nu3dvli9fzhVXXEFUVNQhlUhM11Nbp2zPL2NTdgkb9payMaeEjXtL2JZXhq9OGdonlt9dcAwXj+5H\ncmz7mdHUtH/tpYE7+N69C/auatl79hkB5z3Q/HkNrF69mjfeeIOFCxcSFhbG9OnTmTNnDgMHDiQv\nL49Vq1ychYWFxMfH88gjjzBjxgxGjx7dsvGbTiEzv4zPNuXx+aY8Fm7Jo7jSTTApAv17RnN07+6c\nO7wP54/oy7B+cW0cremouk6yaEfef/99Fi1a9O0U5RUVFfTv359zzz2XDRs2cNttt3HBBRdwzjnn\ntHGkpj0pqqjZb8bUrbllLNyax859rt0hJT6K847ty/j0ngzpE8ug5O5ER9j/4qZldJ2/pMMoAQSL\nqnL99dfzxz/+8YBjK1eu5N1332XmzJm89tprzJo1qw0iNG2hvNrHh+tz3Cpqpa5XUn5ZFXkl1ewt\nrqSooma/83tGhzNuQAI3nXIUJw9KIiMpxtoZTNB0nWTRjpx11llceuml3H777SQlJZGfn09ZWRlR\nUVFERkZy2WWXMXjwYG688UYAYmNjKSkpaeOoTTCoKoszC3hl8U7eWbmHsmo32jkmIpSkWLeGwoDE\naI7L6Ommvkhwg936J0QT18nXTzDtiyWLNjBixAjuuecezjrrLOrq6ggPD+fRRx8lNDSUG264AVVF\nRPjLX/4CwHXXXceNN95oDdydRJWvlo17S/l0Uy6vLsliW14Z0RGhXDCiL5eOS2VkajxRETbK2bQv\nNkV5J9RVn7s9qqiuZVNOCWt2F7Myq4jVu4pYv7f42yU6J2QkcNm4VM4f0ZeYbvbdzbS+djFFuTFd\nyd6iSpZkFrBhbzEbskvYsLeEzH3l1H8fi40MY0RKD64/OYMRKT0Yk9aTlPiotg3amABZsjDmMKgq\nO/dV8PW2fL7eto9vtu1jx75yAEIE0hNjOKZvHFNGpzCkTyzD+8WRlhBtDdCmw+r0yaK+/r+r6CzV\niu1VdnElry3N4tXFWWzNKwNcr6Tj0hO45sQBHJeewJA+sTazqul0OnWyiIyMJD8/n8TExC6RMFSV\n/Px8IiNtZG5Lqqmt44N1ObyyeCcfbcihTl1bw48mpnPCUYkM6tXdlu00nV6nThapqalkZWWRm5vb\n1qG0msjISFJTU5s/0RyUqrJsZyFzl+/m7ZW7ySutJjm2GzefNpDLxvcnIymmrUM0plV16mQRHh5O\nRkZGW4dhOpBN2SW8tXw3b63Yxc59FUSEhTBpaDKXjU/l1MG9CAu1tZ1N19Spk4Uxgaj21TFv1R6e\nXLidFd6MrBMHJXH7pKM5d3hvYm3wmzGWLEzXlVNSyQtf7+D5r3eQW1LFUb1iuPvCYVw0qh+9Yru1\ndXjGtCuWLEyXUlunfLkln9eWZvH2yt3U1CqnD+nFdRMzOGVQkjVUG9MESxam01NV1uwu5s1lu5i7\nYjc5JVXEdgvjyglpXHtSOkf16t7WIRrT7lmyMJ1WaZWPlxft5MVvdrApp5TwUOH0Icl8f0wKZw5N\ntrEQxhyCoCYLEZkMPIxbVvVxVX2gwfGHgDO8zWggWVXjReQM4CG/U4cCU1X1zWDGazqH7OJKnlq4\nnee/yqS40sfYtHju//6xXDCiL/HRNgmjMYcjaMlCREKBmcDZQBawSETmqura+nNU9Q6/828Fxnj7\nPwJGe/sTgM3Ae8GK1XRcvto6iipqKKqoIaekilcWZzF3xS5q65Tzju3LjadkMCatZ1uHaUyHF8yS\nxQRgs6puBRCROcAUYG0T508D7mlk/6XAu6paHpQoTYeyp6iCJ7/Yzn9W76WgrJqSKt9+x6PCQ7nq\n+AFcPzGDtMToNorSmM4nmMkiBdjpt50FHN/YiSIyAMgAPmzk8FTgH01cNx2YDpCWlnYksZp2bu3u\nYh7/bCtzV+xGgTOGJNM/IYr4qAjio8PpERVOj+hwxvSPt6omY4KgvTRwTwVeVdVa/50i0hcYAcxv\n7CJVnQXMAreeRbCDNK1L1XVz/dcnW/hsUx7REaFcc2I6101Mp3+ClRqMaU3BTBa7gP5+26nevsZM\nBX7ayP7LgTdUtaaRY6YTW7R9Hw/O38DX2/bRK7Ybv5w8hKsmDKBHtI2mNqYtBDNZLAIGi0gGLklM\nBa5seJKIDAV6Al82co9pwK+DGKNpZ1bsLOTvCzby6cZckrp3496LhjF1Qpp1czWmjQUtWaiqT0Ru\nwVUhhQKzVXWNiNwHLFbVud6pU4E52mAhBhFJx5VMPglWjKbtlVX5WLenmLV7ivlkQy4frM+hZ3Q4\nvzl/KD88Id3WojamnejUa3Cb9umjDTm8uiSLdbuL2ZZf9u2yo0ndI7j2xHSuOzmD7rYetTGtwtbg\nNu2OqvLE59u4f946kmO7Mbp/PFNGpzC8XxzDU+LoExfZJRapMqYjsmRhWoWvto773l7LM19mcsGI\nvvz98lHWDmFMB2LJwgRdWZWP215cxgfrc/jxqUfxq8lDbXZXYzoYSxYmqHKKK7n+6UWs3V3MH6cM\n54cnprd1SMaYw2DJwgRFla+WN5bu4uEPNlFUUcPj147nzKG92zosY8xhsmRhWlRplY8Xv97B459v\nJbu4imNT4njsmvEcm9KjrUMzxhwBSxamRRSUVfPkwu08vXA7RRU1nHhUIg9eNoqTByVZDydjOgFL\nFuaIFJZX89hnW3nqi+2UVddyzrDe/NfpA21acGM6GUsW5rAUldfw+OdbefKL7ZRW+bhgZF9unzSY\no3vHtnVoxpggsGRhDsmW3FLeWLqLpxdup6TKx/kj+nD7pKMZ0seShDGdmSUL06yd+8p5e+Ue/r1i\nN2v3FCMC5wzrzc/OOppj+sa1dXjGmFZgycI0qrzax1vLd/Py4p0s21EIwJi0eO6+cBgXjOxL77jI\nNo7QGNOaLFmY/WzOKeW5rzJ5bUkWJVU+hvaJ5VeTh3LhyL624JAxXZglCwPApxtzefSTLSzckk9E\naAjnj+jDD08cwNi0ntb11RhjyaKrU1Ue/WQrf/nPelLio/jl5CFcPr4/Sd27tXVoxph2xJJFF+ar\nreOeuWt4/usdXDSqH3+7dKTNBGtMWynfBzu+gswvIHMhVJfCwDNh8DmQfjKEte0XOEsWXVRZlY9b\nX1zGh+tzuPm0gfzy3CE2E6xp2q4lUFMBPTMgti+EhBzZ/UpzYPXrsOUDiOgO3ZPdKyYZuvcGrYPy\nPCjLhbI8KM+H2ho4+lwYch50O8Su2hWFMPcW6DUUxl0HPVIOPea6WijeDSV7oXSv+1myx8VY64O6\nGqjzea9aGHASHHcjhEc1fc/i3fDlTNjyEeSscftCu0HqeIhOhCVPwdePQngMHHU6DJrk/v3Durn7\nhkW6V2Qc9Eg99Gc6BEFdKU9EJgMP45ZVfVxVH2hw/CHgDG8zGkhW1XjvWBrwOG5pVQXOV9XtTb2X\nrZQXOP+ZYO+bcixXnzCgrUMy7VVNJbz3W1j0+Hf7QiMgfgAkZEDKeDjpFoiIaf5e1WWwfh6sfAm2\nfAhaC4mDXWIoy4Wq4savC4uCmCSorYbSbPfhOPgcOPYHLnkc7MMY3Af3i1Nh8wfuvSQEhp4Px90E\nGadCIG1ye1fBqzdA3ob990uoiy20G4SEQmg4hIS598zbAHEpcPqvYdQ0CPX7bl6WB58/5P5d63yQ\nfgoMmOgSTMo4CPd6G1aXw/bPYON82PQeFO1sPL6UcXDTh80/RyMCXSkvaMlCREKBjcDZQBawCJim\nqmubOP9WYIyqXu9tfwzcr6oLRKQ7UKeq5U29nyWLwKzKKuLm55ZQUF7NjCvH2Eywpmn5W+CVH8He\nlXDiLe5bbcF22LfN/SzY5j5E4wfARf90VSaNKciEL/4JK192VSs9+sOIy2Dk5ZB8zHfnVZdDWQ6U\n5roP8JgkiOn1XSKqq4Osb2D1a7DmDZdgIrrDqf8PJt7e9If+B3+Ezx6EC/4Og86CxbNh6TNQUQBJ\nQ2DCTTD6ysYTnqr7QJ//W4jqCafe6Z43trf7hh+d6JJEY7Z9Bu/f40plSUNg0t2uOunLGfDVv6Cm\nHEZOhdN/BT3Tm//voer+zSuLwFflSnq+KvBVuJLWoLOav0cj2kOyOBG4V1XP9bZ/DaCq/93E+QuB\ne7zkMAyYpaonB/p+liwOrrZOefSTLTy0YCNJ3bvx2DXjGZFqM8G2K3V18NnfXXVGwlGQMND9jE4I\n7NtvS1r1Kvz7dvdN+XuPwpDJjZ+3/Qv4922QvxlGXQnn3u/iBZdUPvs7rHjRfZsfcTmMngZpJx15\nNVZdLWz/3FXRbJgH42+A8/924Af32rfg5WtgzA/h4ke++3esqXDVYN/Mgj3LXSI47kaYMN1Vh4FL\nJnNvhXX/hkFnw/cfdQnsUKi66z+4D/I3QUi4++87/PuuxNFryJH9O7SA9pAsLgUmq+qN3vYPgeNV\n9ZZGzh0AfAWkqmqtiHwPuBGoBjKA94G7VLW2wXXTgekAaWlp4zIzM4PyLB1dVkE5P39pBd9s38cF\nI/ty//eOJT46oq3DMg0tfcZ9ODUU2QOGnA9T/rf5D9n182DXYug31lVNxPUN/P1VoXCH+4Bf+jT0\nPwEufaL5uvCaSvj0r/DFw+5D98zfwc5vYMUcVyUz7lqY+LPDaydoTl0dfPAHV3IZcgH84HGI8MYD\nZa+Fx8+C3sPgR+803kCs6hqVv5wB699xVWwjL3ff0t/7PZTshrPuhRN+emQJrtYHy5+H3ctg/PXQ\nd+Th36uFdbRk8StcorjV79ongDHADuAlYJ6qPtHU+1nJonFvLtvF799cjQJ/uHg4l4xNsXET7VFZ\nHswY7xpgf/im+9DetwX2bXXVGKtfc8lizFVN36NwB8w83lVv1Ivt6xJH31HQvZf7MI+Mh6h4l4SK\ndkHWIsha7H6W5bjrTv45nPEbV7II1N5V8NYt7pt6WKRrSJ54+6ElrMP19Sx495euYXjaS+6DfdYZ\n7t9i+ieBxZC3Gb6aCctfAF+lq2669ElIHRf8+NtQoMkimL2hduEap+ulevsaMxX4qd92FrBcVbcC\niMibwAm4BGICUOWr5Tevr+a1pVmMH9CTh64YbSOw27P3fg9VJXDhQ65xs9fR7gXu23NRFiy42zXM\nRjUx/fu7v3I/b1niqlB2LXGv3UthwzsHf//EQa5NImWcq1f3b0sIVJ8RcOMHsO1j6H0sxPY59Hsc\nruOnu/d7/SaYfY5LkkVZrkQRaLJKGuT+/c/4rWtUHnimS6gGCG6yWAQMFpEMXJKYClzZ8CQRGQr0\nBL5scG28iPRS1VzgTMCKDQEqKKvmx88u4Zvt+7h90mBuPXMQYaFHWEfcFVQWQfYa96ET2++7HimB\n2rfV1eFHJ0BcP9cTJjqp+eqLbZ/Bihfg5Dsa/5AOCYHzH4RZp8FHf3Z18w2tf8fV3Z99n/vQA+h/\n3HfHaypcAqkohMrC737vnuwSRH07w5EKDTvshtYjNuxi9zwvTnVtKBc+BGnHH/p9YpJcm4LZT9CS\nhar6ROQWYD6u6+xsVV0jIvcBi1V1rnfqVGCO+tWHee0WdwIfiKszWQI8FqxYO5OtuaVc/9QidhdV\n8si0MVw0ql9bh9QxFO+GJ89zvXzqRSW4D/weqZAyFtJOcB+s/r1mKgpdz5wVc2DnVwfeNyTcfbMd\ncTmcfteB1Tq+anjn567K49RfNh1f35GuAXbR4zDmaletVK+qFOb9EpKHwQk/afz68Cj3iuvkfw9p\nJ7gupLuXw7GXtHU0nUpQx1m0JmuzgK+25nPzc0sIEeGxa8YxbkALfVvs7Epz4Mnz3SCrC//h+r0X\n73IJpHi3SyC5GwB1DbZ9R7nG35LdrkG5tgqSjnZ96Yde4MYT1F9bvAty1sGm+ZB6HPzgCejpN67l\n07/Bh3+CK1+Bo885eJwVhfDIONdD6vr535VY3vs9LPwfty/thGD9K5lOqj20WZhW9PrSLH712krS\nEqJ58kcTSEu09omAlO+DZ77nPtSvfh0GnNj4eRWFrgF4x5eu98yix10JY9y1Lkn0G7N/99aUsftf\nv/o1+PfP4P9OgYtnuCqTfVvh0wdh2JTmEwW4Rumz74O3fuK6o465ylWbffW/rmuoJQoTRFay6OCq\nfLX897z1PLVwOycNTORfV42jR/Qh9GDpyioK4ZmLIWc9XPWym04hULU1gOw/Krc5+7bBq9e7Bufj\nbnTJYuciuOWbwKuH6urgycluwNwti+DFaZC3EW5d0nLtDqZLsZJFF7BzXzm3vLCUFVlFXD8xg7vO\nG0pEmDVkB6SqBJ6/zPXFn/rCoSUKOLQupfUSMlxV0Yf3wcJH3L7Jfzm0dgT/xu4nz4Pc9TBlpiUK\nE3SWLDqoBWuz+cXLy1Hg0avHMfnYVuym2B6purmFImKb731UuANe/7HrVnrZU4FVAbWUsAg450+Q\ncTpkfu6mmjhU9Y3d38xyo6FHHdDJ0JgWZ8mig6mpreOv/1nPY59tY0RKD2ZeObbrtU/UT8JWuMNN\nLFeyB0qyvYbmIa4L6ohLD/z2X13mRhl/8TAgcMks13bQFgaf5V6H64zfugR5wn8d+dQZxgTA2iw6\nkJ37yrltzjKW7SjkmhMH8Ns2SyWIAAAdoElEQVQLjqFbWBdcf+Lla2H9265XUGwf6N7H/YyKd/P9\nZK+GHmkw8TbXzTQs0jUwL7jbNWQf+wM46w8Q37/59zKmk7M2i07m3VV7+NVrK1GFGVeO4cKRnby/\nfFMyF8LaN+H037jZOhs6+eduKudPH4R5d8Inf3XjJHYvdV1ef/BE0z2ejDFNsmTRzlXW1PKnd9by\n3Fc7GNU/nhnTxnTOaTsqi90I5GHfa3rkdF0d/OfXbqDcSY1MuAeu++rR57r1DjK/cEmjYJvrrjr6\nyqankzbGHJQli3Zsc04pt7ywlPV7S5h+6lHcec6Qztnbadun8OZP3MIumxa4mUMbm+xw5Rw3Sd0l\nj303s2hTRNwcR+kBz3JvjDmIZj95RORWEWli5jITLOv3FvO9mV+QU1LFk9cdx2/OP6ZjJoqqUlci\naExNhSspPH2Rmxr6uBth9auu6qix+7z/B7cy27GXBjdmY8wBAilZ9AYWichSYDYwXztLq3g7lVda\nxQ1PLSamWyhv/GQi/eKbWTayPVJ1I4vf+71bHzj9ZMg4zb2SBrt5/d/4sRtQNmG6a3AOj3I9lj7+\ns5sM79gffHe/Lx526x5f8Zz1/jGmDTSbLFT1dyLye+Ac4Dpghoi8DDyhqluCHWBXU+Wr5eZnl5Bf\nVsUrPz6pYyaKmkp4+2duSorB57qlMbd94lYMA9d7qSwXuveGH76x/3KcFz3s5mJ68ycQn+7WEijc\n6eY+OvbS/WdSNca0moDaLFRVRWQvsBfw4aYUf1VEFqjqQabKNIdCVfntG6tZnFnAjCvHtN6ypxWF\n8NoNrovpKb84cF6jQ1G8G1662g14O/3XbibVkBBv/eDtLmls+9StXXzGb113V39h3Vzp4bEz3VTT\nN33oVkIDt2KZMaZNNDvOQkRuB64B8oDHgTdVtUZEQoBNqjow+GE2rzOMs5j16Rb+PG89t08azB1n\nH906b1qWD89+z82MGhHj1joYfA6c9iu36li9mkrY+hGsnetmUI1KcBPXpZ3ofiYc5VZbe+lqN5XG\nJf8Hx1x0+HHlrIcnznbTWBRsd0nnzN8e8eMaY/bXkuMsEoBLVHW/Ba5VtU5ELjzcAM3+PliXzX+/\nu54LRvTl9kmDW+dNS7Jdoti3Faa9CP2Ph0WPwcIZ8PgkGDjJLQKz9WPYOB+qS9zKYYPPdQlh3b9h\n2bPuXjHJLtHE9XNVS72HHVlsyUPdkpYvXOaqrSbefsSPa4w5fIGULE4A1qhqibcdBxyjql+3QnwB\n68gli43ZJXx/5hdk9IrhlR+fRFREK4wFKNrlZlwt3g3T5sBRp313rKoEFj3h2gnK810p4pgL3VTa\n6ae6+Y3A9XLK2/jdtN0hYXDOH1t2UrutH7tlRP0X+zHGtJhASxaBJItlwNj6HlBe9dNiVT2Ciu2W\n11GTRUFZNRfP/JzKmjrm3jKRvj1aoUG7YDs8fbFby+HqV5teB6G6zCWD3iMObSpuY0yHEWiyCKQP\nojRY8rSOABvGRWSyiGwQkc0iclcjxx8SkeXea6OIFPodq/U7NrfhtZ1BTW0dP31hKdlFVfzfD8cF\nP1HU1ri5k5483603fe1bB18wJyLGLepjicKYLi+QT4GtInIb8C9v+yfA1uYuEpFQYCZwNpCFG6sx\nV1XX1p+jqnf4nX8rMMbvFhWqOjqA+Dqs+99Zx8It+Tx42SjGpgVx3GNpLix9ChbNdkuB9syAH70E\nfUYE7z2NMZ1KIMniZuB/gN8BCnwATA/gugnAZlXdCiAic4ApwNomzp8G3BPAfTuFlxbt4KmF27nh\n5AwuHZcanDfJ3Qif/8PNuFpb7cYzXPgQDD7b5kgyxhySQAbl5QBTD+PeKcBOv+0s4PjGThSRAUAG\n8KHf7kgRWYwb1/GAqr7ZyHXT8RJXWlraYYTYNhZv38fv3lzNKYOT+PV5Q4PzJtlr3UpqtTUw9lo3\nSrpXK3XHNcZ0Os0mCxGJBG4AhgPfTgeqqte3YBxTgVdVtdZv3wBV3SUiRwEfisiqhiPGVXUWMAtc\nA3cLxhM0uwsruPm5JaTERzFj2ljCQoMwdcW+bfDs9930GT/+BHqmt/x7GGO6lEA+qZ4F+gDnAp8A\nqUBJANftAvxXl0n19jVmKvCi/w5V3eX93Ap8zP7tGR1SSWUNNz2zmMqaOh6/djw9og9jHedm32Sv\nGztRW+XGO1iiMMa0gECSxSBV/T1QpqpPAxfQRHVSA4uAwSKSISIRuIRwQK8mERmKmz7kS799PUWk\nm/d7EjCRpts6OoTKmlqmP7OEDXtLeOTKMQxKjm35N6kogGcvcQ3aV70Kyce0/HsYY7qkQBq4a7yf\nhSJyLG5+qOTmLlJVn4jcAswHQoHZqrpGRO7DjdOoTxxTgTkNZrI9Bvg/EanDJbQH/HtRdTS+2jpu\ne3EZX27N559XjOaMIc3+8x266jJ44Qo3LuKql/efqsMYY45QIMlilreexe9wJYPuwO8DubmqzgPm\nNdh3d4Ptexu5biHQKfp1qiq/fn0V763N5t6LhvG9MSkt/ya1PrcuddYiN0WG/yyuxhjTAg6aLLzR\n2sWqWgB8ChzVKlF1EqrKn+et45UlWdw+aTA/mpgRnDf69K+weQFc+E8Y/r3gvIcxpks7aJuFN1rb\npiA/TP/6ZAuPfbaNa08cwM/OCtLkgDu+gk//BqOuhPHXBec9jDFdXiAN3O+LyJ0i0l9EEupfQY+s\ng3tvzV7++p8NTBndj3suGo40tqb0kaosgtdvgvg0OO8vLX9/Y4zxBNJmcYX386d++xSrkmpSla+W\nP72zjqN7d+fBy0YREhKERAHwzp1u9tjr/+OWLjXGmCAJZAR3kCraO6+nvtjOjn3lPHvDBMKDMegO\nYOXLsOplOP030H9CcN7DGGM8gYzgvqax/ar6TMuH0/HlllTxyIebmTQ0mVMG9zr8G5XmwP+dBj1S\nXVvEcG9ENkBBJrzzC7dY0Sm/aJnAjTHmIAKphjrO7/dIYBKwFLBk0Yh/LNhIZU0tv7ngCAfELbgb\nynJdgnjzv+A/d8GoaTD2GpcoVOGSWTZ9uDGmVQRSDXWr/7aIxANzghZRB7ZuTzEvLdrBtSelM7BX\n98O/UeaXsOJFOPnnMOlu2P4ZLH7SrV739aPunO/Psqk8jDGt5nC+lpbhZog1flSVP72zlrio8CNb\nQ7vWB/PuhLhUOPVOEIGMU92rLA+WP+9KFSMvb7ngjTGmGYG0Wfwb1/sJXFfbYcDLwQyqI3p/XQ5f\nbM7n3ouGER8dcfg3WvQ4ZK+Gy591K9X5i0mCibcfWaDGGHMYAilZPOj3uw/IVNWsIMXTIVX76rj/\nnbUM7BXDVScMOPwblWTDR/fDwElwzEUtF6AxxhyhQJLFDmCPqlYCiEiUiKSr6vagRtaBPPPldrbn\nl/Pkj447sq6y798DNRVw3l9d9ZMxxrQTgXyyvQLU+W3XevsMbgDeo59s4eRBSZw+5Ai6ymYudI3a\nE2+DpEEtF6AxxrSAQJJFmKpW1294vx9BpXznMm/VHvJKq7np1KMOf0qPWp8bjd2jv42bMMa0S4FU\nQ+WKyMX160+IyBQgL7hhdRxPLczkqKQYThmUtP+BTQvcWIl+Y+Go092ru1/Jo64Wdi9z5218F3LW\nNN6obYwx7UAgyeJm4HkRmeFtZwGNjuruapbvLGTFzkLuvWjY/vM/ZS2Gl6+BqARY/zYsf87t7z3C\n6wKbA5s/gIp9gEDKOJj8F2vUNsa0W4EMytsCnCAi3b3t0kBvLiKTgYdxK+U9rqoPNDj+EHCGtxkN\nJKtqvN/xONxyqm+q6i2Bvm9reXrhdmIiQvnBuNTvduZthucvg+7JcMMCiE6EPcth68ew5SNY9Bh0\ni4PB58Dgs91CRdE2ia8xpn0LZJzFn4G/qmqht90T+IWq/q6Z60KBmcDZuNLIIhGZ6788qqre4Xf+\nrcCYBrf5I27RpXYnt6SKd1buYdqE/sRGhrudJXvhue+DhMDVr7uEAa7kkDLOtUf4qiEkDEKCNMGg\nMcYEQSCfWOfVJwoAb9W88wO4bgKwWVW3eo3ic4ApBzl/GvBi/YaIjAN6A+8F8F6tbs43O6iureOa\nk9LdjsoieO5SKMuHq16BxIGNXxgWYYnCGNPhBPKpFSoi3eo3RCQK6HaQ8+ulADv9trO8fQcQkQG4\nKUQ+9LZDgL8Ddx7sDURkuogsFpHFubm5AYTUMmpq63ju60xOGZzk5oDyVcFLV0PuOrjiGUgZ22qx\nGGNMawgkWTwPfCAiN4jIjcAC4OkWjmMq8Kqq1nrbPwHmNTdSXFVnqep4VR3fq9cRjHE4RPPX7CW7\nuIprT0z3dvwGtn0KU2bCoLNaLQ5jjGktgTRw/0VEVgBn4eaImg8EMqfFLqC/33aqt68xU9l/Jb4T\ngVNE5CdAdyBCREpV9a4A3jfonl64nf4JUZwx1GuT2PwBDL0QRk1t28CMMSZIAq08z8YlisuAM4F1\nAVyzCBgsIhkiEoFLCHMbniQiQ4GewJf1+1T1KlVNU9V0XFXUM+0lUazZXcSi7QVcc0I6oSHixksU\nZUHS0W0dmjHGBE2TJQsRORrX6DwNNwjvJUBU9YymrvGnqj4RuQVXEgkFZqvqGhG5D1hcP8gPl0Tm\nqKo2da/25JmFmUSFh3L5eK/QVLwb6mqg5xFMIGiMMe3cwaqh1gOfAReq6mYAEbnjIOcfQFXnAfMa\n7Lu7wfa9zdzjKeCpQ3nfYCksr+bN5bu4ZGwqPaK97rIF293PeEsWxpjO62DVUJcAe4CPROQxEZkE\ndOmpUBduyafKV8dl4/0G4RVmup9WsjDGdGJNJgtVfVNVpwJDgY+AnwHJIvIvETmntQJsTxZvLyAy\nPIQRKT2+21mQ6Qbh9ejf9IXGGNPBNdvAraplqvqCql6E69G0DPhV0CNrh5Zk7mNUavz+a1YUZkJc\nCoSGt11gxhgTZIc0lFhVC7yxDZOCFVB7VVFdy5rdxYwb0HP/AwWZ1l5hjOn0bN6JAK3IKsRXp4xP\nb5AsCjOtvcIY0+lZsgjQkswCAMam+SWLmkoo2WMlC2NMp2fJIkBLMgsYlNyd+Gi/RQKLvKmvrGRh\njOnkLFkEoK5OWbqjgHFpjbRXgJUsjDGdniWLAGzNK6WwvIZxB7RXbHc/rWRhjOnkLFkEYPF2114x\nvrGeUKHdoHufNojKGGNajyWLACzJLCAhJoKMpJj9DxRmQnx/W8zIGNPp2adcAJZkFjA2rSciDWY7\nsTEWxpguwpJFM/aVVbM1r+zAwXjgjbFIb/WYjDGmtVmyaEb9+IoDBuNVFkFFgTVuG2O6BEsWzVic\nuY/wUNl/8kCwbrPGmC7FkkUzlmYWcGxKDyLDQ/c/YFOTG2O6EEsWB1Hlq2VFVtGBg/HAShbGmC4l\nqMlCRCaLyAYR2SwiB6yhLSIPichy77VRRAq9/QNEZKm3f42I3BzMOJuyZncx1b66A9srwJUsusVB\nVCPHjDGmkznYsqpHRERCgZnA2UAWsEhE5qrq2vpzVPUOv/NvBcZ4m3uAE1W1SkS6A6u9a3cHK97G\nLPEG441trCdUfbfZht1pjTGmEwpmyWICsFlVt6pqNTAHmHKQ86cBLwKoarWqVnn7uwU5ziYtztxH\nWkI0ybGRBx60qcmNMV1IMD+EU4CdfttZ3r4DiMgAIAP40G9ffxFZ6d3jL42VKkRkuogsFpHFubm5\nLRq8qrIks/DAKT7cQSjcYe0Vxpguo700cE8FXlXV2vodqrpTVUcCg4BrRaR3w4u8VfvGq+r4Xr16\ntWhAO/aVk1da1XgVVFku1JRbycIY02UEM1nsAvr7bad6+xozFa8KqiGvRLEaOKVFo2tG+fw/8kT4\n3xpv3LaeUMaYLiaYyWIRMFhEMkQkApcQ5jY8SUSGAj2BL/32pYpIlPd7T+BkYEMQY92fKv22vcqk\n0GUMlkbym42xMMZ0MUFLFqrqA24B5gPrgJdVdY2I3CciF/udOhWYo6rqt+8Y4GsRWQF8AjyoqquC\nFesBctbSo8a1gYSufuXA4wXb3c/4tFYLyRhj2lLQus4CqOo8YF6DfXc32L63kesWACODGdtBbVoA\nwI6IQaStegXO/P3+XWQLMyGmF0TENHEDY4zpXNpLA3f7svl9NjCAb/pMc72edn69//ECm23WGNO1\nWLJoqLIY3fElH/pGkt//bAiPhpUv7X9Ooa1jYYzpWixZNLTtE6TOx8e1o+nZMwGGnA9r3gBftTte\n64OiLGvcNsZ0KZYsGtq0AF94LEt0MH3iImHk5W7dii0fuOPFu6DOZyULY0yXYsnCnypsfp/cXifg\nI4zecZEw8EyITvyuKsq6zRpjuiBLFv5y1kHxLjbHnQBA77huEBoOwy+BDe9CZbENyDPGdEmWLPxt\ndl1ml0ceR0RYCD2iwt3+kZeDrxLWv+1KFhICPVLbMFBjjGldQR1n0eFsWgDJw9lcGUefuDqkfmxF\n6nGuq+zKlyAmGeJSXYnDGGO6CCtZ1KsqgR1fweCzyC6udFVQ9URgxOWw7VPYtdjaK4wxXY4li3pb\nP4G6Ghh0NjnFVSTHNVjDYuTloHWwb6u1VxhjuhxLFvU2L4CIWLT/8ewtrqR3wwWPkgZD39HudytZ\nGGO6GEsW4LrMbnofjjqNUp9QXl27fzVUvZGXu59WsjDGdDGWLABy10NxFgw+m+xit5prnx6NLKU6\nahqMvAIGntHKARpjTNuy3lDw7SyzDDqbnNxKgMbX3Y5OgEtmtWJgxhjTPljJAlx7RfIw6JFCdolL\nFo1WQxljTBdlyaKqBDK/hEFnAbC3yFVD9W7YG8oYY7owSxa+KpgwHYZNASC7uJLYbmHEdLMaOmOM\nqRfUZCEik0Vkg4hsFpG7Gjn+kIgs914bRaTQ2z9aRL4UkTUislJErghakDFJMPnPkDoegJySSpKt\nCsoYY/YTtK/PIhIKzATOBrKARSIyV1XX1p+jqnf4nX8rMMbbLAeuUdVNItIPWCIi81W1MFjx1ssu\nrrIqKGOMaSCYJYsJwGZV3aqq1cAcYMpBzp8GvAigqhtVdZP3+24gB+gVxFi/tbeo0pKFMcY0EMxk\nkQLs9NvO8vYdQEQGABnAh40cmwBEAFsaOTZdRBaLyOLc3NwjDlhVrRrKGGMa0V4auKcCr6pqrf9O\nEekLPAtcp6p1DS9S1VmqOl5Vx/fqdeQFj4LyGmpq1a2QZ4wx5lvBTBa7gP5+26nevsZMxauCqici\nccA7wG9V9augRNhAdnH9GAtLFsYY4y+YyWIRMFhEMkQkApcQ5jY8SUSGAj2BL/32RQBvAM+o6qtB\njHE/3yULq4Yyxhh/QUsWquoDbgHmA+uAl1V1jYjcJyIX+506FZijquq373LgVOBHfl1rRwcr1nr1\nyaLRqT6MMaYLC+rIM1WdB8xrsO/uBtv3NnLdc8BzwYytMfWTCFoDtzHG7K+9NHC3C9nFlSTERNAt\nLLStQzHGmHbFkoWf7OIqkmOtVGGMMQ1ZsvCTU2ID8owxpjGWLPy40dtWsjDGmIYsWXh8tXXklVbZ\ngDxjjGmEJQtPflk1dQrJliyMMeYAliw8NnrbGGOaZsnCs7fIRm8bY0xTLFl4sktsOVVjjGmKJQtP\nTnElIQJJ3a1kYYwxDVmy8GQXV9IrthuhIdLWoRhjTLtjycJjy6kaY0zTLFl4sosrbbZZY4xpgiUL\nT3ZxJX16WHuFMcY0xpIFUOWrpaC8ht5WsjDGmEZZsgByiq3brDHGHIwlC9xss2CLHhljTFOCmixE\nZLKIbBCRzSJyVyPHH/JbNnWjiBT6HfuPiBSKyNvBjBFgb5GVLIwx5mCCtqyqiIQCM4GzgSxgkYjM\nVdW19eeo6h1+598KjPG7xd+AaODHwYqxXv28UDbjrDHGNC6YJYsJwGZV3aqq1cAcYMpBzp8GvFi/\noaofACVBjO9b2SWVRISGEB8d3hpvZ4wxHU4wk0UKsNNvO8vbdwARGQBkAB8eyhuIyHQRWSwii3Nz\ncw870JziKpLjuiFio7eNMaYx7aWBeyrwqqrWHspFqjpLVcer6vhevXod9pu7FfKsCsoYY5oSzGSx\nC+jvt53q7WvMVPyqoFpbdoktp2qMMQcTzGSxCBgsIhkiEoFLCHMbniQiQ4GewJdBjOWgcmxeKGOM\nOaigJQtV9QG3APOBdcDLqrpGRO4TkYv9Tp0KzFFV9b9eRD4DXgEmiUiWiJwbjDhLq3yUVvksWRhj\nzEEEressgKrOA+Y12Hd3g+17m7j2lOBF9p1qXx0XjerH8H5xrfF2xhjTIQU1WXQECTERPDJtTPMn\nGmNMF9ZeekMZY4xpxyxZGGOMaZYlC2OMMc2yZGGMMaZZliyMMcY0y5KFMcaYZlmyMMYY0yxLFsYY\nY5olDWbZ6LBEJBfIPIJbJAF5LRROe2LP1fF01mez52qfBqhqs9N2d5pkcaREZLGqjm/rOFqaPVfH\n01mfzZ6rY7NqKGOMMc2yZGGMMaZZliy+M6utAwgSe66Op7M+mz1XB2ZtFsYYY5plJQtjjDHNsmRh\njDGmWV0+WYjIZBHZICKbReSuto7nSIjIbBHJEZHVfvsSRGSBiGzyfvZsyxgPh4j0F5GPRGStiKwR\nkdu9/R362UQkUkS+EZEV3nP9wdufISJfe3+TL3lr2Hc4IhIqIstE5G1vu7M813YRWSUiy0Vksbev\nQ/8tBqJLJwsRCQVmAucBw4BpIjKsbaM6Ik8Bkxvsuwv4QFUHAx942x2ND/iFqg4DTgB+6v136ujP\nVgWcqaqjgNHAZBE5AfgL8JCqDgIKgBvaMMYjcTuwzm+7szwXwBmqOtpvfEVH/1tsVpdOFsAEYLOq\nblXVamAOMKWNYzpsqvopsK/B7inA097vTwPfa9WgWoCq7lHVpd7vJbgPoBQ6+LOpU+pthnsvBc4E\nXvX2d7jnAhCRVOAC4HFvW+gEz3UQHfpvMRBdPVmkADv9trO8fZ1Jb1Xd4/2+F+jdlsEcKRFJB8YA\nX9MJns2rqlkO5AALgC1Aoar6vFM66t/kP4FfAnXediKd47nAJfT3RGSJiEz39nX4v8XmhLV1AKb1\nqKqKSIftKy0i3YHXgJ+parH7sup01GdT1VpgtIjEA28AQ9s4pCMmIhcCOaq6REROb+t4guBkVd0l\nIsnAAhFZ73+wo/4tNqerlyx2Af39tlO9fZ1Jtoj0BfB+5rRxPIdFRMJxieJ5VX3d290png1AVQuB\nj4ATgXgRqf8i1xH/JicCF4vIdlzV7pnAw3T85wJAVXd5P3NwCX4CnehvsSldPVksAgZ7vTQigKnA\n3DaOqaXNBa71fr8WeKsNYzksXn33E8A6Vf2H36EO/Wwi0ssrUSAiUcDZuPaYj4BLvdM63HOp6q9V\nNVVV03H/T32oqlfRwZ8LQERiRCS2/nfgHGA1HfxvMRBdfgS3iJyPq18NBWar6v1tHNJhE5EXgdNx\nUyZnA/cAbwIvA2m4KdwvV9WGjeDtmoicDHwGrOK7OvDf4NotOuyzichIXGNoKO6L28uqep+IHIX7\nRp4ALAOuVtWqtov08HnVUHeq6oWd4bm8Z3jD2wwDXlDV+0UkkQ78txiILp8sjDHGNK+rV0MZY4wJ\ngCULY4wxzbJkYYwxplmWLIwxxjTLkoUxxphmWbIw5hCISK0322j9q8UmjBORdP8Zg41pT2y6D2MO\nTYWqjm7rIIxpbVayMKYFeGsc/NVb5+AbERnk7U8XkQ9FZKWIfCAiad7+3iLyhreWxQoROcm7VaiI\nPOatb/GeN7LbmDZnycKYQxPVoBrqCr9jRao6ApiBmxUA4BHgaVUdCTwP/I+3/3+AT7y1LMYCa7z9\ng4GZqjocKAR+EOTnMSYgNoLbmEMgIqWq2r2R/dtxCxlt9SY93KuqiSKSB/RV1Rpv/x5VTRKRXCDV\nf7oLb/r1Bd4COojIr4BwVf1T8J/MmIOzkoUxLUeb+P1Q+M+VVIu1K5p2wpKFMS3nCr+fX3q/L8TN\nvApwFW5CRHBLb/4XfLsAUo/WCtKYw2HfWow5NFHeynb1/qOq9d1ne4rISlzpYJq371bgSRH5f0Au\ncJ23/3ZglojcgCtB/BewB2PaKWuzMKYFeG0W41U1r61jMSYYrBrKGGNMs6xkYYwxpllWsjDGGNMs\nSxbGGGOaZcnCGGNMsyxZGGOMaZYlC2OMMc36/68xcFc8+ODNAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tpDQnvTon84S",
        "colab_type": "code",
        "outputId": "cb6ab331-d2b6-4433-d644-47d5f3b9efd1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "model.load_weights(weight_path)\n",
        "score, acc = model.evaluate([x_validate['left'], x_validate['right']], y_validate, batch_size=batch_size)\n",
        "print('Test score:', score)\n",
        "print('Test accuracy:', acc)\n",
        "score1, acc1 = model.evaluate([x_train['left'], x_train['right']], y_train, batch_size=batch_size)\n",
        "print('Test score:', score1)\n",
        "print('Test accuracy:', acc1)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "121287/121287 [==============================] - 10s 81us/sample - loss: 0.2463 - acc: 0.7629\n",
            "Test score: 0.2463080734445745\n",
            "Test accuracy: 0.7628765\n",
            "283003/283003 [==============================] - 23s 82us/sample - loss: 0.2320 - acc: 0.7804\n",
            "Test score: 0.23198073914449008\n",
            "Test accuracy: 0.7803804\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q0-jRw-AScrv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}